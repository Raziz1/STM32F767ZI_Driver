
STM32F767ZI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bf4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dec  08000dec  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dec  08000dec  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08000dec  08000dec  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dec  08000dec  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dec  08000dec  00010dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08000df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000058  08000e4c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08000e4c  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013ca  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ab  00000000  00000000  0002148f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00021940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fe  00000000  00000000  00021aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000028f4  00000000  00000000  00021b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001be8  00000000  00000000  00024492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ac03  00000000  00000000  0002607a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000004d4  00000000  00000000  00030c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  00031154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000058 	.word	0x20000058
 8000214:	00000000 	.word	0x00000000
 8000218:	08000dd4 	.word	0x08000dd4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000005c 	.word	0x2000005c
 8000234:	08000dd4 	.word	0x08000dd4

08000238 <delay>:
uint8_t rcv_buff[];
uint8_t commandcode;
uint8_t len;

void delay(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 250000; i++);
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e002      	b.n	800024a <delay+0x12>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4a04      	ldr	r2, [pc, #16]	; (8000260 <delay+0x28>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d9f8      	bls.n	8000244 <delay+0xc>
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	0003d08f 	.word	0x0003d08f

08000264 <I2C1_GPIOInits>:

// PB8 -> I2C1_SCL
// PB9 -> I2C1_SDA

void I2C1_GPIOInits(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <I2C1_GPIOInits+0x40>)
 800026c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800026e:	2302      	movs	r3, #2
 8000270:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000272:	2301      	movs	r3, #1
 8000274:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000276:	2301      	movs	r3, #1
 8000278:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800027a:	2304      	movs	r3, #4
 800027c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800027e:	2302      	movs	r3, #2
 8000280:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000282:	2308      	movs	r3, #8
 8000284:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f9a5 	bl	80005d8 <GPIO_Init>

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800028e:	2309      	movs	r3, #9
 8000290:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f99f 	bl	80005d8 <GPIO_Init>
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40020400 	.word	0x40020400

080002a8 <I2C1_Inits>:

void I2C1_Inits(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <I2C1_Inits+0x20>)
 80002ae:	4a07      	ldr	r2, [pc, #28]	; (80002cc <I2C1_Inits+0x24>)
 80002b0:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR; // only needed if slave mode (@see protocol reference for reserved addresses)
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <I2C1_Inits+0x20>)
 80002b4:	2261      	movs	r2, #97	; 0x61
 80002b6:	721a      	strb	r2, [r3, #8]
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM100K;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <I2C1_Inits+0x20>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	605a      	str	r2, [r3, #4]
    I2C_Init(&I2C1Handle);
 80002be:	4802      	ldr	r0, [pc, #8]	; (80002c8 <I2C1_Inits+0x20>)
 80002c0:	f000 fc74 	bl	8000bac <I2C_Init>
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000074 	.word	0x20000074
 80002cc:	40005400 	.word	0x40005400

080002d0 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIObtn;
	//GPIO button
	GPIObtn.pGPIOx = GPIOC;
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <GPIO_ButtonInit+0x34>)
 80002d8:	607b      	str	r3, [r7, #4]
	GPIObtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002da:	230d      	movs	r3, #13
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIObtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002de:	2300      	movs	r3, #0
 80002e0:	727b      	strb	r3, [r7, #9]
	GPIObtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002e2:	2302      	movs	r3, #2
 80002e4:	72bb      	strb	r3, [r7, #10]
	GPIObtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 80002ea:	2101      	movs	r1, #1
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <GPIO_ButtonInit+0x34>)
 80002ee:	f000 f85b 	bl	80003a8 <GPIO_PeriClockControl>
	GPIO_Init(&GPIObtn);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f96f 	bl	80005d8 <GPIO_Init>
}
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40020800 	.word	0x40020800

08000308 <main>:
	GPIO_PeriClockControl(GPIOB, ENABLE);
	GPIO_Init(&Gpioled);
}

int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
	//Initialize user button
	GPIO_ButtonInit();
 800030e:	f7ff ffdf 	bl	80002d0 <GPIO_ButtonInit>

	//I2C pin inits
	I2C1_GPIOInits();
 8000312:	f7ff ffa7 	bl	8000264 <I2C1_GPIOInits>

	//I2C peripheral configuration
	I2C1_Inits();
 8000316:	f7ff ffc7 	bl	80002a8 <I2C1_Inits>

	//Enable the I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 800031a:	2101      	movs	r1, #1
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <main+0x40>)
 800031e:	f000 fc29 	bl	8000b74 <I2C_PeripheralControl>

    uint8_t receive_data = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	71fb      	strb	r3, [r7, #7]
    {
        // wait for button press
        //while( ! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
        //printf("Running Program");
        //delay();
        while (receive_data!=1)
 8000326:	e005      	b.n	8000334 <main+0x2c>
        {
        	I2C_MasterReceiveData(&I2C1Handle, &receive_data, sizeof(uint8_t), SLAVE_ADDR);
 8000328:	1df9      	adds	r1, r7, #7
 800032a:	2368      	movs	r3, #104	; 0x68
 800032c:	2201      	movs	r2, #1
 800032e:	4807      	ldr	r0, [pc, #28]	; (800034c <main+0x44>)
 8000330:	f000 fcb6 	bl	8000ca0 <I2C_MasterReceiveData>
        while (receive_data!=1)
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d1f6      	bne.n	8000328 <main+0x20>
        }
		GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_7);
 800033a:	2107      	movs	r1, #7
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <main+0x48>)
 800033e:	f000 fafd 	bl	800093c <GPIO_ToggleOutputPin>
		delay();
 8000342:	f7ff ff79 	bl	8000238 <delay>
        while (receive_data!=1)
 8000346:	e7f5      	b.n	8000334 <main+0x2c>
 8000348:	40005400 	.word	0x40005400
 800034c:	20000074 	.word	0x20000074
 8000350:	40020400 	.word	0x40020400

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 fd03 	bl	8000d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ffbf 	bl	8000308 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000398:	08000df4 	.word	0x08000df4
  ldr r2, =_sbss
 800039c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80003a0:	2000008c 	.word	0x2000008c

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note 				- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d178      	bne.n	80004ac <GPIO_PeriClockControl+0x104>
	{
		if (pGPIOx == GPIOA)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a7a      	ldr	r2, [pc, #488]	; (80005a8 <GPIO_PeriClockControl+0x200>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003c2:	4b7a      	ldr	r3, [pc, #488]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a79      	ldr	r2, [pc, #484]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOK)
		{
			GPIOK_PCLK_DI();
		}
	}
}
 80003ce:	e0e5      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOB)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a77      	ldr	r2, [pc, #476]	; (80005b0 <GPIO_PeriClockControl+0x208>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003d8:	4b74      	ldr	r3, [pc, #464]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a73      	ldr	r2, [pc, #460]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e0da      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOC)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a72      	ldr	r2, [pc, #456]	; (80005b4 <GPIO_PeriClockControl+0x20c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ee:	4b6f      	ldr	r3, [pc, #444]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a6e      	ldr	r2, [pc, #440]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e0cf      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOD)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a6e      	ldr	r2, [pc, #440]	; (80005b8 <GPIO_PeriClockControl+0x210>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000404:	4b69      	ldr	r3, [pc, #420]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a68      	ldr	r2, [pc, #416]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e0c4      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOE)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a69      	ldr	r2, [pc, #420]	; (80005bc <GPIO_PeriClockControl+0x214>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800041a:	4b64      	ldr	r3, [pc, #400]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a63      	ldr	r2, [pc, #396]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000420:	f043 0310 	orr.w	r3, r3, #16
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e0b9      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOF)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a65      	ldr	r2, [pc, #404]	; (80005c0 <GPIO_PeriClockControl+0x218>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000430:	4b5e      	ldr	r3, [pc, #376]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a5d      	ldr	r2, [pc, #372]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e0ae      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOG)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a60      	ldr	r2, [pc, #384]	; (80005c4 <GPIO_PeriClockControl+0x21c>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000446:	4b59      	ldr	r3, [pc, #356]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a58      	ldr	r2, [pc, #352]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800044c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e0a3      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOH)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a5c      	ldr	r2, [pc, #368]	; (80005c8 <GPIO_PeriClockControl+0x220>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800045c:	4b53      	ldr	r3, [pc, #332]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a52      	ldr	r2, [pc, #328]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e098      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOI)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a57      	ldr	r2, [pc, #348]	; (80005cc <GPIO_PeriClockControl+0x224>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 8000472:	4b4e      	ldr	r3, [pc, #312]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a4d      	ldr	r2, [pc, #308]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047e:	e08d      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a53      	ldr	r2, [pc, #332]	; (80005d0 <GPIO_PeriClockControl+0x228>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000488:	4b48      	ldr	r3, [pc, #288]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a47      	ldr	r2, [pc, #284]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800048e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000492:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000494:	e082      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOK)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a4e      	ldr	r2, [pc, #312]	; (80005d4 <GPIO_PeriClockControl+0x22c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d17e      	bne.n	800059c <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 800049e:	4b43      	ldr	r3, [pc, #268]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a2:	4a42      	ldr	r2, [pc, #264]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004aa:	e077      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		if (pGPIOx == GPIOA)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a3e      	ldr	r2, [pc, #248]	; (80005a8 <GPIO_PeriClockControl+0x200>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 80004b4:	4b3d      	ldr	r3, [pc, #244]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4a3c      	ldr	r2, [pc, #240]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004ba:	f023 0301 	bic.w	r3, r3, #1
 80004be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c0:	e06c      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOB)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a3a      	ldr	r2, [pc, #232]	; (80005b0 <GPIO_PeriClockControl+0x208>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d106      	bne.n	80004d8 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 80004ca:	4b38      	ldr	r3, [pc, #224]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a37      	ldr	r2, [pc, #220]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004d0:	f023 0302 	bic.w	r3, r3, #2
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d6:	e061      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOC)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a36      	ldr	r2, [pc, #216]	; (80005b4 <GPIO_PeriClockControl+0x20c>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d106      	bne.n	80004ee <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e4:	4a31      	ldr	r2, [pc, #196]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004e6:	f023 0304 	bic.w	r3, r3, #4
 80004ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ec:	e056      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOD)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a31      	ldr	r2, [pc, #196]	; (80005b8 <GPIO_PeriClockControl+0x210>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a2c      	ldr	r2, [pc, #176]	; (80005ac <GPIO_PeriClockControl+0x204>)
 80004fc:	f023 0308 	bic.w	r3, r3, #8
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000502:	e04b      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOE)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a2d      	ldr	r2, [pc, #180]	; (80005bc <GPIO_PeriClockControl+0x214>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d106      	bne.n	800051a <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000510:	4a26      	ldr	r2, [pc, #152]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000512:	f023 0310 	bic.w	r3, r3, #16
 8000516:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000518:	e040      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOF)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a28      	ldr	r2, [pc, #160]	; (80005c0 <GPIO_PeriClockControl+0x218>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 8000522:	4b22      	ldr	r3, [pc, #136]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a21      	ldr	r2, [pc, #132]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000528:	f023 0320 	bic.w	r3, r3, #32
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052e:	e035      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOG)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a24      	ldr	r2, [pc, #144]	; (80005c4 <GPIO_PeriClockControl+0x21c>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d106      	bne.n	8000546 <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053c:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800053e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000542:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000544:	e02a      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOH)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a1f      	ldr	r2, [pc, #124]	; (80005c8 <GPIO_PeriClockControl+0x220>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d106      	bne.n	800055c <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055a:	e01f      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOI)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <GPIO_PeriClockControl+0x224>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d106      	bne.n	8000572 <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	4a10      	ldr	r2, [pc, #64]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800056a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800056e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000570:	e014      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <GPIO_PeriClockControl+0x228>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d106      	bne.n	8000588 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <GPIO_PeriClockControl+0x204>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000586:	e009      	b.n	800059c <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOK)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <GPIO_PeriClockControl+0x22c>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d105      	bne.n	800059c <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	4a05      	ldr	r2, [pc, #20]	; (80005ac <GPIO_PeriClockControl+0x204>)
 8000596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800059a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020400 	.word	0x40020400
 80005b4:	40020800 	.word	0x40020800
 80005b8:	40020c00 	.word	0x40020c00
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40021400 	.word	0x40021400
 80005c4:	40021800 	.word	0x40021800
 80005c8:	40021c00 	.word	0x40021c00
 80005cc:	40022000 	.word	0x40022000
 80005d0:	40022400 	.word	0x40022400
 80005d4:	40022800 	.word	0x40022800

080005d8 <GPIO_Init>:
 * @return				- none
 *
 * @Note 				- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp register
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2101      	movs	r1, #1
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fedc 	bl	80003a8 <GPIO_PeriClockControl>

	//1. Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	795b      	ldrb	r3, [r3, #5]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d81f      	bhi.n	8000638 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	795b      	ldrb	r3, [r3, #5]
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	4619      	mov	r1, r3
 8000616:	2303      	movs	r3, #3
 8000618:	408b      	lsls	r3, r1
 800061a:	43db      	mvns	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	400a      	ands	r2, r1
 8000624:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->MODER |= temp; //Setting
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6819      	ldr	r1, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	430a      	orrs	r2, r1
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	e0dc      	b.n	80007f2 <GPIO_Init+0x21a>
	}
	else /* Interrupt mode */
	{

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	795b      	ldrb	r3, [r3, #5]
 800063c:	2b04      	cmp	r3, #4
 800063e:	d117      	bne.n	8000670 <GPIO_Init+0x98>
		{
			//1.Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000640:	4b51      	ldr	r3, [pc, #324]	; (8000788 <GPIO_Init+0x1b0>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	7912      	ldrb	r2, [r2, #4]
 8000648:	4611      	mov	r1, r2
 800064a:	2201      	movs	r2, #1
 800064c:	408a      	lsls	r2, r1
 800064e:	4611      	mov	r1, r2
 8000650:	4a4d      	ldr	r2, [pc, #308]	; (8000788 <GPIO_Init+0x1b0>)
 8000652:	430b      	orrs	r3, r1
 8000654:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000656:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <GPIO_Init+0x1b0>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7912      	ldrb	r2, [r2, #4]
 800065e:	4611      	mov	r1, r2
 8000660:	2201      	movs	r2, #1
 8000662:	408a      	lsls	r2, r1
 8000664:	43d2      	mvns	r2, r2
 8000666:	4611      	mov	r1, r2
 8000668:	4a47      	ldr	r2, [pc, #284]	; (8000788 <GPIO_Init+0x1b0>)
 800066a:	400b      	ands	r3, r1
 800066c:	6093      	str	r3, [r2, #8]
 800066e:	e035      	b.n	80006dc <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	795b      	ldrb	r3, [r3, #5]
 8000674:	2b05      	cmp	r3, #5
 8000676:	d117      	bne.n	80006a8 <GPIO_Init+0xd0>
		{
			//1.Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000678:	4b43      	ldr	r3, [pc, #268]	; (8000788 <GPIO_Init+0x1b0>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	7912      	ldrb	r2, [r2, #4]
 8000680:	4611      	mov	r1, r2
 8000682:	2201      	movs	r2, #1
 8000684:	408a      	lsls	r2, r1
 8000686:	4611      	mov	r1, r2
 8000688:	4a3f      	ldr	r2, [pc, #252]	; (8000788 <GPIO_Init+0x1b0>)
 800068a:	430b      	orrs	r3, r1
 800068c:	6093      	str	r3, [r2, #8]
			//Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068e:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <GPIO_Init+0x1b0>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	7912      	ldrb	r2, [r2, #4]
 8000696:	4611      	mov	r1, r2
 8000698:	2201      	movs	r2, #1
 800069a:	408a      	lsls	r2, r1
 800069c:	43d2      	mvns	r2, r2
 800069e:	4611      	mov	r1, r2
 80006a0:	4a39      	ldr	r2, [pc, #228]	; (8000788 <GPIO_Init+0x1b0>)
 80006a2:	400b      	ands	r3, r1
 80006a4:	60d3      	str	r3, [r2, #12]
 80006a6:	e019      	b.n	80006dc <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	795b      	ldrb	r3, [r3, #5]
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d115      	bne.n	80006dc <GPIO_Init+0x104>
		{
			//1.Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b0:	4b35      	ldr	r3, [pc, #212]	; (8000788 <GPIO_Init+0x1b0>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	7912      	ldrb	r2, [r2, #4]
 80006b8:	4611      	mov	r1, r2
 80006ba:	2201      	movs	r2, #1
 80006bc:	408a      	lsls	r2, r1
 80006be:	4611      	mov	r1, r2
 80006c0:	4a31      	ldr	r2, [pc, #196]	; (8000788 <GPIO_Init+0x1b0>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c6:	4b30      	ldr	r3, [pc, #192]	; (8000788 <GPIO_Init+0x1b0>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	7912      	ldrb	r2, [r2, #4]
 80006ce:	4611      	mov	r1, r2
 80006d0:	2201      	movs	r2, #1
 80006d2:	408a      	lsls	r2, r1
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <GPIO_Init+0x1b0>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6093      	str	r3, [r2, #8]
		}

		//2.Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	089b      	lsrs	r3, r3, #2
 80006e2:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	f003 0303 	and.w	r3, r3, #3
 80006ec:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a26      	ldr	r2, [pc, #152]	; (800078c <GPIO_Init+0x1b4>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d05f      	beq.n	80007b8 <GPIO_Init+0x1e0>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a24      	ldr	r2, [pc, #144]	; (8000790 <GPIO_Init+0x1b8>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d040      	beq.n	8000784 <GPIO_Init+0x1ac>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <GPIO_Init+0x1bc>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d039      	beq.n	8000780 <GPIO_Init+0x1a8>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <GPIO_Init+0x1c0>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d032      	beq.n	800077c <GPIO_Init+0x1a4>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a20      	ldr	r2, [pc, #128]	; (800079c <GPIO_Init+0x1c4>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d02b      	beq.n	8000778 <GPIO_Init+0x1a0>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <GPIO_Init+0x1c8>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d024      	beq.n	8000774 <GPIO_Init+0x19c>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <GPIO_Init+0x1cc>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d01d      	beq.n	8000770 <GPIO_Init+0x198>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <GPIO_Init+0x1d0>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d016      	beq.n	800076c <GPIO_Init+0x194>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <GPIO_Init+0x1d4>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d00f      	beq.n	8000768 <GPIO_Init+0x190>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <GPIO_Init+0x1d8>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d008      	beq.n	8000764 <GPIO_Init+0x18c>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <GPIO_Init+0x1dc>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d101      	bne.n	8000760 <GPIO_Init+0x188>
 800075c:	230a      	movs	r3, #10
 800075e:	e02c      	b.n	80007ba <GPIO_Init+0x1e2>
 8000760:	2300      	movs	r3, #0
 8000762:	e02a      	b.n	80007ba <GPIO_Init+0x1e2>
 8000764:	2309      	movs	r3, #9
 8000766:	e028      	b.n	80007ba <GPIO_Init+0x1e2>
 8000768:	2308      	movs	r3, #8
 800076a:	e026      	b.n	80007ba <GPIO_Init+0x1e2>
 800076c:	2307      	movs	r3, #7
 800076e:	e024      	b.n	80007ba <GPIO_Init+0x1e2>
 8000770:	2306      	movs	r3, #6
 8000772:	e022      	b.n	80007ba <GPIO_Init+0x1e2>
 8000774:	2305      	movs	r3, #5
 8000776:	e020      	b.n	80007ba <GPIO_Init+0x1e2>
 8000778:	2304      	movs	r3, #4
 800077a:	e01e      	b.n	80007ba <GPIO_Init+0x1e2>
 800077c:	2303      	movs	r3, #3
 800077e:	e01c      	b.n	80007ba <GPIO_Init+0x1e2>
 8000780:	2302      	movs	r3, #2
 8000782:	e01a      	b.n	80007ba <GPIO_Init+0x1e2>
 8000784:	2301      	movs	r3, #1
 8000786:	e018      	b.n	80007ba <GPIO_Init+0x1e2>
 8000788:	40013c00 	.word	0x40013c00
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400
 8000794:	40020800 	.word	0x40020800
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40021000 	.word	0x40021000
 80007a0:	40021400 	.word	0x40021400
 80007a4:	40021800 	.word	0x40021800
 80007a8:	40021c00 	.word	0x40021c00
 80007ac:	40022000 	.word	0x40022000
 80007b0:	40022400 	.word	0x40022400
 80007b4:	40022800 	.word	0x40022800
 80007b8:	2300      	movs	r3, #0
 80007ba:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80007bc:	4b5c      	ldr	r3, [pc, #368]	; (8000930 <GPIO_Init+0x358>)
 80007be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c0:	4a5b      	ldr	r2, [pc, #364]	; (8000930 <GPIO_Init+0x358>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode <<(temp2 * 4);
 80007c8:	7c7a      	ldrb	r2, [r7, #17]
 80007ca:	7cbb      	ldrb	r3, [r7, #18]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	fa02 f103 	lsl.w	r1, r2, r3
 80007d2:	4a58      	ldr	r2, [pc, #352]	; (8000934 <GPIO_Init+0x35c>)
 80007d4:	7cfb      	ldrb	r3, [r7, #19]
 80007d6:	3302      	adds	r3, #2
 80007d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3.Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007dc:	4b56      	ldr	r3, [pc, #344]	; (8000938 <GPIO_Init+0x360>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	7912      	ldrb	r2, [r2, #4]
 80007e4:	4611      	mov	r1, r2
 80007e6:	2201      	movs	r2, #1
 80007e8:	408a      	lsls	r2, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a52      	ldr	r2, [pc, #328]	; (8000938 <GPIO_Init+0x360>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]

	//2. Configure the speed of the GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	799b      	ldrb	r3, [r3, #6]
 80007fa:	461a      	mov	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	791b      	ldrb	r3, [r3, #4]
 8000812:	4619      	mov	r1, r3
 8000814:	2303      	movs	r3, #3
 8000816:	408b      	lsls	r3, r1
 8000818:	43db      	mvns	r3, r3
 800081a:	4619      	mov	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	400a      	ands	r2, r1
 8000822:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6899      	ldr	r1, [r3, #8]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	430a      	orrs	r2, r1
 8000832:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	79db      	ldrb	r3, [r3, #7]
 800083c:	461a      	mov	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	68da      	ldr	r2, [r3, #12]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	4619      	mov	r1, r3
 8000856:	2303      	movs	r3, #3
 8000858:	408b      	lsls	r3, r1
 800085a:	43db      	mvns	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	400a      	ands	r2, r1
 8000864:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68d9      	ldr	r1, [r3, #12]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	430a      	orrs	r2, r1
 8000874:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]

	//4. Configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	7a1b      	ldrb	r3, [r3, #8]
 800087e:	461a      	mov	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	4619      	mov	r1, r3
 8000896:	2301      	movs	r3, #1
 8000898:	408b      	lsls	r3, r1
 800089a:	43db      	mvns	r3, r3
 800089c:	4619      	mov	r1, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	400a      	ands	r2, r1
 80008a4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]

	//5. Configure the alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	795b      	ldrb	r3, [r3, #5]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d131      	bne.n	8000926 <GPIO_Init+0x34e>
	{
		//Configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	08db      	lsrs	r3, r3, #3
 80008c8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	7c3a      	ldrb	r2, [r7, #16]
 80008da:	3208      	adds	r2, #8
 80008dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	220f      	movs	r2, #15
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	7c3a      	ldrb	r2, [r7, #16]
 80008f4:	4001      	ands	r1, r0
 80008f6:	3208      	adds	r2, #8
 80008f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	7c3a      	ldrb	r2, [r7, #16]
 8000902:	3208      	adds	r2, #8
 8000904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7a5b      	ldrb	r3, [r3, #9]
 800090c:	461a      	mov	r2, r3
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	7c3a      	ldrb	r2, [r7, #16]
 800091e:	4301      	orrs	r1, r0
 8000920:	3208      	adds	r2, #8
 8000922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40013800 	.word	0x40013800
 8000938:	40013c00 	.word	0x40013c00

0800093c <GPIO_ToggleOutputPin>:
 * @return				- none
 *
 * @Note 				- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	78fa      	ldrb	r2, [r7, #3]
 800094e:	2101      	movs	r1, #1
 8000950:	fa01 f202 	lsl.w	r2, r1, r2
 8000954:	405a      	eors	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	615a      	str	r2, [r3, #20]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <RCC_GetPLLOutputClock>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

uint32_t RCC_GetPLLOutputClock()
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	// TODO: Write function to determine PLL output clock
	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
	...

08000974 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <RCC_GetPCLK1Value+0xa0>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 8000988:	7a7b      	ldrb	r3, [r7, #9]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <RCC_GetPCLK1Value+0x20>
	{
		// HSI clock source
		SystemClk = 16000000;
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <RCC_GetPCLK1Value+0xa4>)
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	e00b      	b.n	80009ac <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8000994:	7a7b      	ldrb	r3, [r7, #9]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d102      	bne.n	80009a0 <RCC_GetPCLK1Value+0x2c>
	{
		// HSE clock source
		SystemClk = 8000000;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <RCC_GetPCLK1Value+0xa8>)
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e005      	b.n	80009ac <RCC_GetPCLK1Value+0x38>

	}
	else if (clksrc == 2)
 80009a0:	7a7b      	ldrb	r3, [r7, #9]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d102      	bne.n	80009ac <RCC_GetPCLK1Value+0x38>
	{
		// PLL is not used in this course
		// TODO: Write function to determine PLL output clock
		SystemClk = RCC_GetPLLOutputClock();
 80009a6:	f7ff ffdd 	bl	8000964 <RCC_GetPLLOutputClock>
 80009aa:	60f8      	str	r0, [r7, #12]
	}

	// Determine AHB prescaler from register
	temp = ((RCC->CFGR >> 4) & 0xF);
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <RCC_GetPCLK1Value+0xa0>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 030f 	and.w	r3, r3, #15
 80009b8:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 80009ba:	7a3b      	ldrb	r3, [r7, #8]
 80009bc:	2b07      	cmp	r3, #7
 80009be:	d802      	bhi.n	80009c6 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	72fb      	strb	r3, [r7, #11]
 80009c4:	e005      	b.n	80009d2 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp - 8];
 80009c6:	7a3b      	ldrb	r3, [r7, #8]
 80009c8:	3b08      	subs	r3, #8
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <RCC_GetPCLK1Value+0xac>)
 80009cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d0:	72fb      	strb	r3, [r7, #11]
	}

	// Determine APB1 prescaler from register
	temp = ((RCC->CFGR >> 10) & 0x7);
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <RCC_GetPCLK1Value+0xa0>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	0a9b      	lsrs	r3, r3, #10
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 80009e0:	7a3b      	ldrb	r3, [r7, #8]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d802      	bhi.n	80009ec <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	72bb      	strb	r3, [r7, #10]
 80009ea:	e005      	b.n	80009f8 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4];
 80009ec:	7a3b      	ldrb	r3, [r7, #8]
 80009ee:	3b04      	subs	r3, #4
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <RCC_GetPCLK1Value+0xb0>)
 80009f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f6:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a00:	7abb      	ldrb	r3, [r7, #10]
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	00f42400 	.word	0x00f42400
 8000a1c:	007a1200 	.word	0x007a1200
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000010 	.word	0x20000010

08000a28 <I2C_GenerateStartCondition>:

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR2 |= (1 << I2C_CR2_START);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	605a      	str	r2, [r3, #4]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
    pI2Cx->CR2 |= (1 << I2C_CR2_STOP);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	605a      	str	r2, [r3, #4]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <I2C_ExecuteAddressPhaseRead>:
	// Configure transfer direction as read (master mode)
	pI2Cx->CR2 |= (1 << I2C_CR2_RD_WRN);
}

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	70fb      	strb	r3, [r7, #3]
	// Place the slave address in the appropriate 7:1 register (master mode)
	pI2Cx->CR2 |= (SlaveAddr << 1);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	78fa      	ldrb	r2, [r7, #3]
 8000a76:	0052      	lsls	r2, r2, #1
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	605a      	str	r2, [r3, #4]
	// Configure transfer direction as write (master mode)
	pI2Cx->CR2 &= ~(1 << I2C_CR2_RD_WRN);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	605a      	str	r2, [r3, #4]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <I2C_PeriClockControl>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d12b      	bne.n	8000afe <I2C_PeriClockControl+0x6a>
	{
		if(pI2Cx == I2C1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a2d      	ldr	r2, [pc, #180]	; (8000b60 <I2C_PeriClockControl+0xcc>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d106      	bne.n	8000abc <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a2c      	ldr	r2, [pc, #176]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
		}else if (pI2Cx == I2C4)
		{
			I2C4_PCLK_DI();
		}
	}
}
 8000aba:	e04b      	b.n	8000b54 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a2a      	ldr	r2, [pc, #168]	; (8000b68 <I2C_PeriClockControl+0xd4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d106      	bne.n	8000ad2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000aca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad0:	e040      	b.n	8000b54 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C3)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <I2C_PeriClockControl+0xd8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d106      	bne.n	8000ae8 <I2C_PeriClockControl+0x54>
			I2C3_PCLK_EN();
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ae6:	e035      	b.n	8000b54 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C4)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <I2C_PeriClockControl+0xdc>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d131      	bne.n	8000b54 <I2C_PeriClockControl+0xc0>
			I2C4_PCLK_EN();
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000afc:	e02a      	b.n	8000b54 <I2C_PeriClockControl+0xc0>
		if(pI2Cx == I2C1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <I2C_PeriClockControl+0xcc>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d106      	bne.n	8000b14 <I2C_PeriClockControl+0x80>
			I2C1_PCLK_DI();
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000b0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b12:	e01f      	b.n	8000b54 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <I2C_PeriClockControl+0xd4>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d106      	bne.n	8000b2a <I2C_PeriClockControl+0x96>
			I2C2_PCLK_DI();
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000b22:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b28:	e014      	b.n	8000b54 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <I2C_PeriClockControl+0xd8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d106      	bne.n	8000b40 <I2C_PeriClockControl+0xac>
			I2C3_PCLK_DI();
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000b38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b3e:	e009      	b.n	8000b54 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C4)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <I2C_PeriClockControl+0xdc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d105      	bne.n	8000b54 <I2C_PeriClockControl+0xc0>
			I2C4_PCLK_DI();
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <I2C_PeriClockControl+0xd0>)
 8000b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40005400 	.word	0x40005400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40005800 	.word	0x40005800
 8000b6c:	40005c00 	.word	0x40005c00
 8000b70:	40006000 	.word	0x40006000

08000b74 <I2C_PeripheralControl>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d106      	bne.n	8000b94 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f043 0201 	orr.w	r2, r3, #1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000b92:	e005      	b.n	8000ba0 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f023 0201 	bic.w	r2, r3, #1
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
	...

08000bac <I2C_Init>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    // Enable the clock for the I2Cx peripheral
    I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff6a 	bl	8000a94 <I2C_PeriClockControl>
    // Initialize as slave mode
    pI2CHandle->Mode = I2C_MODE_SLAVE;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	731a      	strb	r2, [r3, #12]

    // Program the device own address (Using 7-bit slave address)
    uint32_t tempreg = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
    tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7a1b      	ldrb	r3, [r3, #8]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	609a      	str	r2, [r3, #8]
    // Own address 1 is a 7-bit address
    pI2CHandle->pI2Cx->OAR1 &= ~(1 << I2C_OAR1_OA1MODE);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bee:	609a      	str	r2, [r3, #8]
    // Own Address 1 enabled
    pI2CHandle->pI2Cx->OAR1 |= (1 << I2C_OAR1_OA1EN);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bfe:	609a      	str	r2, [r3, #8]

    // fill I2C_TIMINGR register using hard-coded timings values
    uint8_t mode = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	72fb      	strb	r3, [r7, #11]
    mode = pI2CHandle->I2C_Config.I2C_SCLSpeed; // mode: SM10k, SM100k, FM or FMPLUS
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	72fb      	strb	r3, [r7, #11]
    if (RCC_GetPCLK1Value() == 8000000)
 8000c0a:	f7ff feb3 	bl	8000974 <RCC_GetPCLK1Value>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <I2C_Init+0xd4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d107      	bne.n	8000c26 <I2C_Init+0x7a>
    {
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_8[mode];
 8000c16:	7afa      	ldrb	r2, [r7, #11]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4919      	ldr	r1, [pc, #100]	; (8000c84 <I2C_Init+0xd8>)
 8000c1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c22:	611a      	str	r2, [r3, #16]
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_48[mode];
    }else if (RCC_GetPCLK1Value() == 54000000)
    {
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_54[mode];
    }
}
 8000c24:	e028      	b.n	8000c78 <I2C_Init+0xcc>
    }else if (RCC_GetPCLK1Value() == 16000000)
 8000c26:	f7ff fea5 	bl	8000974 <RCC_GetPCLK1Value>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <I2C_Init+0xdc>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d107      	bne.n	8000c42 <I2C_Init+0x96>
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_16[mode];
 8000c32:	7afa      	ldrb	r2, [r7, #11]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4914      	ldr	r1, [pc, #80]	; (8000c8c <I2C_Init+0xe0>)
 8000c3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c3e:	611a      	str	r2, [r3, #16]
}
 8000c40:	e01a      	b.n	8000c78 <I2C_Init+0xcc>
    }else if (RCC_GetPCLK1Value() == 48000000)
 8000c42:	f7ff fe97 	bl	8000974 <RCC_GetPCLK1Value>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <I2C_Init+0xe4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d107      	bne.n	8000c5e <I2C_Init+0xb2>
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_48[mode];
 8000c4e:	7afa      	ldrb	r2, [r7, #11]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	490f      	ldr	r1, [pc, #60]	; (8000c94 <I2C_Init+0xe8>)
 8000c56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c5a:	611a      	str	r2, [r3, #16]
}
 8000c5c:	e00c      	b.n	8000c78 <I2C_Init+0xcc>
    }else if (RCC_GetPCLK1Value() == 54000000)
 8000c5e:	f7ff fe89 	bl	8000974 <RCC_GetPCLK1Value>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <I2C_Init+0xec>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d106      	bne.n	8000c78 <I2C_Init+0xcc>
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_54[mode];
 8000c6a:	7afa      	ldrb	r2, [r7, #11]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	490a      	ldr	r1, [pc, #40]	; (8000c9c <I2C_Init+0xf0>)
 8000c72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c76:	611a      	str	r2, [r3, #16]
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	007a1200 	.word	0x007a1200
 8000c84:	20000018 	.word	0x20000018
 8000c88:	00f42400 	.word	0x00f42400
 8000c8c:	20000028 	.word	0x20000028
 8000c90:	02dc6c00 	.word	0x02dc6c00
 8000c94:	20000038 	.word	0x20000038
 8000c98:	0337f980 	.word	0x0337f980
 8000c9c:	20000048 	.word	0x20000048

08000ca0 <I2C_MasterReceiveData>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint8_t Len, uint8_t SlaveAddr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	71bb      	strb	r3, [r7, #6]
	// Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	79ba      	ldrb	r2, [r7, #6]
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fed0 	bl	8000a64 <I2C_ExecuteAddressPhaseRead>
	//Clear automatic end mode bit to software end mode (TC flag is set when NBYTES data are transferred, stretching SCL low)
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_AUTOEND);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000cd2:	605a      	str	r2, [r3, #4]
	//Set the number of bytes to be received
	pI2CHandle->pI2Cx->CR2 |= (Len << I2C_CR2_NBYTES);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	041b      	lsls	r3, r3, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	605a      	str	r2, [r3, #4]

	// Generate START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe9b 	bl	8000a28 <I2C_GenerateStartCondition>

	// Receive data until Len of data becomes 0
	while (Len > 0)
 8000cf2:	e015      	b.n	8000d20 <I2C_MasterReceiveData+0x80>
	{
		// Wait until the receive data register is empty
		while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000cf4:	bf00      	nop
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f831 	bl	8000d64 <I2C_GetFlagStatus>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f6      	beq.n	8000cf6 <I2C_MasterReceiveData+0x56>
		*pRxbuffer = pI2CHandle->pI2Cx->RXDR;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
		pRxbuffer ++;
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3301      	adds	r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
		Len --;
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	71fb      	strb	r3, [r7, #7]
	while (Len > 0)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1e6      	bne.n	8000cf4 <I2C_MasterReceiveData+0x54>
	}
	// Wait until the transfer complete register is set
    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TC));
 8000d26:	bf00      	nop
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f818 	bl	8000d64 <I2C_GetFlagStatus>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f6      	beq.n	8000d28 <I2C_MasterReceiveData+0x88>

	// Generate a stop bit
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fe81 	bl	8000a46 <I2C_GenerateStopCondition>

	// Clear STOPF flag
    pI2CHandle->pI2Cx->ICR |= (1 << I2C_ICR_STOPCF);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	69da      	ldr	r2, [r3, #28]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0220 	orr.w	r2, r2, #32
 8000d52:	61da      	str	r2, [r3, #28]
    // Clear I2C_CR2 registers
    pI2CHandle->pI2Cx->CR2 = 0x0;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->ISR & FlagName)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699a      	ldr	r2, [r3, #24]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <__libc_init_array>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	4d0d      	ldr	r5, [pc, #52]	; (8000dc4 <__libc_init_array+0x38>)
 8000d90:	4c0d      	ldr	r4, [pc, #52]	; (8000dc8 <__libc_init_array+0x3c>)
 8000d92:	1b64      	subs	r4, r4, r5
 8000d94:	10a4      	asrs	r4, r4, #2
 8000d96:	2600      	movs	r6, #0
 8000d98:	42a6      	cmp	r6, r4
 8000d9a:	d109      	bne.n	8000db0 <__libc_init_array+0x24>
 8000d9c:	4d0b      	ldr	r5, [pc, #44]	; (8000dcc <__libc_init_array+0x40>)
 8000d9e:	4c0c      	ldr	r4, [pc, #48]	; (8000dd0 <__libc_init_array+0x44>)
 8000da0:	f000 f818 	bl	8000dd4 <_init>
 8000da4:	1b64      	subs	r4, r4, r5
 8000da6:	10a4      	asrs	r4, r4, #2
 8000da8:	2600      	movs	r6, #0
 8000daa:	42a6      	cmp	r6, r4
 8000dac:	d105      	bne.n	8000dba <__libc_init_array+0x2e>
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db4:	4798      	blx	r3
 8000db6:	3601      	adds	r6, #1
 8000db8:	e7ee      	b.n	8000d98 <__libc_init_array+0xc>
 8000dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dbe:	4798      	blx	r3
 8000dc0:	3601      	adds	r6, #1
 8000dc2:	e7f2      	b.n	8000daa <__libc_init_array+0x1e>
 8000dc4:	08000dec 	.word	0x08000dec
 8000dc8:	08000dec 	.word	0x08000dec
 8000dcc:	08000dec 	.word	0x08000dec
 8000dd0:	08000df0 	.word	0x08000df0

08000dd4 <_init>:
 8000dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd6:	bf00      	nop
 8000dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dda:	bc08      	pop	{r3}
 8000ddc:	469e      	mov	lr, r3
 8000dde:	4770      	bx	lr

08000de0 <_fini>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr
