
STM32F767ZI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d8c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f84  08000f84  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f84  08000f84  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  08000f84  08000f84  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f84  08000f84  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f84  08000f84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f88  08000f88  00010f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  08000f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000418  080013a4  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080013a4  00020458  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020442  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017c9  00000000  00000000  00020485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005f2  00000000  00000000  00021c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011a  00000000  00000000  000223c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000303a  00000000  00000000  000224e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002578  00000000  00000000  0002551c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c08e  00000000  00000000  00027a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000534  00000000  00000000  00033b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  00034058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000418 	.word	0x20000418
 8000214:	00000000 	.word	0x00000000
 8000218:	08000f6c 	.word	0x08000f6c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000041c 	.word	0x2000041c
 8000234:	08000f6c 	.word	0x08000f6c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <delay>:

#include <string.h>
#include "STM32F767ZI.h"
#include <stdio.h>

void delay(void){
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
  for (uint32_t i = 0; i < 200000; i++)
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	e002      	b.n	800025a <delay+0x12>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3301      	adds	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <delay+0x28>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d9f8      	bls.n	8000254 <delay+0xc>
    ;
}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	00030d3f 	.word	0x00030d3f

08000274 <USART2_GPIOInit>:
uint8_t msg[1024] = "USART Tx testing...........\n";



void USART2_GPIOInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_pins;

    usart2_pins.pGPIOx = GPIOD;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <USART2_GPIOInit+0x40>)
 800027c:	607b      	str	r3, [r7, #4]
    usart2_pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800027e:	2302      	movs	r3, #2
 8000280:	727b      	strb	r3, [r7, #9]
    usart2_pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]
    usart2_pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000286:	2301      	movs	r3, #1
 8000288:	72fb      	strb	r3, [r7, #11]
    usart2_pins.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800028a:	2307      	movs	r3, #7
 800028c:	737b      	strb	r3, [r7, #13]
    usart2_pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800028e:	2302      	movs	r3, #2
 8000290:	72bb      	strb	r3, [r7, #10]

    //TX
    usart2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000292:	2305      	movs	r3, #5
 8000294:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_pins);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f9b1 	bl	8000600 <GPIO_Init>

    //RX
    usart2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800029e:	2306      	movs	r3, #6
 80002a0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_pins);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f9ab 	bl	8000600 <GPIO_Init>
}
 80002aa:	bf00      	nop
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40020c00 	.word	0x40020c00

080002b8 <USART2_Init>:

void USART2_Init()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx= USART2;
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <USART2_Init+0x3c>)
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <USART2_Init+0x40>)
 80002c0:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <USART2_Init+0x3c>)
 80002c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c8:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <USART2_Init+0x3c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <USART2_Init+0x3c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <USART2_Init+0x3c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <USART2_Init+0x3c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <USART2_Init+0x3c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);
 80002e8:	4802      	ldr	r0, [pc, #8]	; (80002f4 <USART2_Init+0x3c>)
 80002ea:	f000 fcee 	bl	8000cca <USART_Init>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000434 	.word	0x20000434
 80002f8:	40004400 	.word	0x40004400

080002fc <GPIO_ButtonInit>:


void GPIO_ButtonInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
    GPIO_Handle_t GPIOBtn;
    GPIOBtn.pGPIOx = GPIOC; // User button is connected to PC13 (Cf. Nucleo User Manual, or check schematics)
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <GPIO_ButtonInit+0x2c>)
 8000304:	607b      	str	r3, [r7, #4]
    GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000306:	230d      	movs	r3, #13
 8000308:	723b      	strb	r3, [r7, #8]
    GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800030a:	2300      	movs	r3, #0
 800030c:	727b      	strb	r3, [r7, #9]
    GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 800030e:	2300      	movs	r3, #0
 8000310:	72bb      	strb	r3, [r7, #10]
    GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000312:	2300      	movs	r3, #0
 8000314:	72fb      	strb	r3, [r7, #11]

    GPIO_Init(&GPIOBtn);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f971 	bl	8000600 <GPIO_Init>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020800 	.word	0x40020800

0800032c <main>:


int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    //SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);

    //printf("Application is running\n");

    // GPIO button init
    GPIO_ButtonInit();
 8000330:	f7ff ffe4 	bl	80002fc <GPIO_ButtonInit>

    // USART pin inits
    USART2_GPIOInit();
 8000334:	f7ff ff9e 	bl	8000274 <USART2_GPIOInit>

    // USART peripheral configuration
    USART2_Init();
 8000338:	f7ff ffbe 	bl	80002b8 <USART2_Init>

    USART_PeripheralControl(USART2, ENABLE);
 800033c:	2101      	movs	r1, #1
 800033e:	480b      	ldr	r0, [pc, #44]	; (800036c <main+0x40>)
 8000340:	f000 fca8 	bl	8000c94 <USART_PeripheralControl>

    while (1)
    {
        // wait for button press
        while( ! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000344:	bf00      	nop
 8000346:	210d      	movs	r1, #13
 8000348:	4809      	ldr	r0, [pc, #36]	; (8000370 <main+0x44>)
 800034a:	f000 fb0b 	bl	8000964 <GPIO_ReadFromInputPin>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0f8      	beq.n	8000346 <main+0x1a>

        delay();
 8000354:	f7ff ff78 	bl	8000248 <delay>

        // send some data to the slave
        USART_SendData(&usart2_handle, (uint8_t *)msg, strlen((char *)msg));
 8000358:	4806      	ldr	r0, [pc, #24]	; (8000374 <main+0x48>)
 800035a:	f7ff ff6d 	bl	8000238 <strlen>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	4904      	ldr	r1, [pc, #16]	; (8000374 <main+0x48>)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <main+0x4c>)
 8000366:	f000 fd8f 	bl	8000e88 <USART_SendData>
        while( ! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 800036a:	e7eb      	b.n	8000344 <main+0x18>
 800036c:	40004400 	.word	0x40004400
 8000370:	40020800 	.word	0x40020800
 8000374:	20000000 	.word	0x20000000
 8000378:	20000434 	.word	0x20000434

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 fdbb 	bl	8000f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ffbd 	bl	800032c <main>

080003b2 <LoopForever>:

LoopForever:
  b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 80003c0:	08000f8c 	.word	0x08000f8c
  ldr r2, =_sbss
 80003c4:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 80003c8:	20000458 	.word	0x20000458

080003cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note 				- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d178      	bne.n	80004d4 <GPIO_PeriClockControl+0x104>
	{
		if (pGPIOx == GPIOA)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a7a      	ldr	r2, [pc, #488]	; (80005d0 <GPIO_PeriClockControl+0x200>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003ea:	4b7a      	ldr	r3, [pc, #488]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a79      	ldr	r2, [pc, #484]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOK)
		{
			GPIOK_PCLK_DI();
		}
	}
}
 80003f6:	e0e5      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOB)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a77      	ldr	r2, [pc, #476]	; (80005d8 <GPIO_PeriClockControl+0x208>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000400:	4b74      	ldr	r3, [pc, #464]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a73      	ldr	r2, [pc, #460]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040c:	e0da      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOC)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a72      	ldr	r2, [pc, #456]	; (80005dc <GPIO_PeriClockControl+0x20c>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000416:	4b6f      	ldr	r3, [pc, #444]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a6e      	ldr	r2, [pc, #440]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e0cf      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOD)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a6e      	ldr	r2, [pc, #440]	; (80005e0 <GPIO_PeriClockControl+0x210>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800042c:	4b69      	ldr	r3, [pc, #420]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a68      	ldr	r2, [pc, #416]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e0c4      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOE)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a69      	ldr	r2, [pc, #420]	; (80005e4 <GPIO_PeriClockControl+0x214>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000442:	4b64      	ldr	r3, [pc, #400]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a63      	ldr	r2, [pc, #396]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000448:	f043 0310 	orr.w	r3, r3, #16
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e0b9      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOF)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a65      	ldr	r2, [pc, #404]	; (80005e8 <GPIO_PeriClockControl+0x218>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000458:	4b5e      	ldr	r3, [pc, #376]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a5d      	ldr	r2, [pc, #372]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e0ae      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOG)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a60      	ldr	r2, [pc, #384]	; (80005ec <GPIO_PeriClockControl+0x21c>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800046e:	4b59      	ldr	r3, [pc, #356]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a58      	ldr	r2, [pc, #352]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	e0a3      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOH)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a5c      	ldr	r2, [pc, #368]	; (80005f0 <GPIO_PeriClockControl+0x220>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000484:	4b53      	ldr	r3, [pc, #332]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a52      	ldr	r2, [pc, #328]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800048a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000490:	e098      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOI)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a57      	ldr	r2, [pc, #348]	; (80005f4 <GPIO_PeriClockControl+0x224>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 800049a:	4b4e      	ldr	r3, [pc, #312]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4a4d      	ldr	r2, [pc, #308]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80004a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a6:	e08d      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a53      	ldr	r2, [pc, #332]	; (80005f8 <GPIO_PeriClockControl+0x228>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 80004b0:	4b48      	ldr	r3, [pc, #288]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	4a47      	ldr	r2, [pc, #284]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80004b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004bc:	e082      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOK)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a4e      	ldr	r2, [pc, #312]	; (80005fc <GPIO_PeriClockControl+0x22c>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d17e      	bne.n	80005c4 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 80004c6:	4b43      	ldr	r3, [pc, #268]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a42      	ldr	r2, [pc, #264]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80004cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d2:	e077      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		if (pGPIOx == GPIOA)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a3e      	ldr	r2, [pc, #248]	; (80005d0 <GPIO_PeriClockControl+0x200>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d106      	bne.n	80004ea <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 80004dc:	4b3d      	ldr	r3, [pc, #244]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a3c      	ldr	r2, [pc, #240]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80004e2:	f023 0301 	bic.w	r3, r3, #1
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e8:	e06c      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOB)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a3a      	ldr	r2, [pc, #232]	; (80005d8 <GPIO_PeriClockControl+0x208>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d106      	bne.n	8000500 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 80004f2:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a37      	ldr	r2, [pc, #220]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80004f8:	f023 0302 	bic.w	r3, r3, #2
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fe:	e061      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOC)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a36      	ldr	r2, [pc, #216]	; (80005dc <GPIO_PeriClockControl+0x20c>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d106      	bne.n	8000516 <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a31      	ldr	r2, [pc, #196]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800050e:	f023 0304 	bic.w	r3, r3, #4
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000514:	e056      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOD)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <GPIO_PeriClockControl+0x210>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d106      	bne.n	800052c <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000524:	f023 0308 	bic.w	r3, r3, #8
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052a:	e04b      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOE)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <GPIO_PeriClockControl+0x214>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d106      	bne.n	8000542 <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800053a:	f023 0310 	bic.w	r3, r3, #16
 800053e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000540:	e040      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOF)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a28      	ldr	r2, [pc, #160]	; (80005e8 <GPIO_PeriClockControl+0x218>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d106      	bne.n	8000558 <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000550:	f023 0320 	bic.w	r3, r3, #32
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000556:	e035      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOG)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a24      	ldr	r2, [pc, #144]	; (80005ec <GPIO_PeriClockControl+0x21c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d106      	bne.n	800056e <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800056a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056c:	e02a      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOH)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <GPIO_PeriClockControl+0x220>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d106      	bne.n	8000584 <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800057c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000582:	e01f      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOI)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <GPIO_PeriClockControl+0x224>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d106      	bne.n	800059a <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 8000592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000598:	e014      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a16      	ldr	r2, [pc, #88]	; (80005f8 <GPIO_PeriClockControl+0x228>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80005a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ae:	e009      	b.n	80005c4 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOK)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <GPIO_PeriClockControl+0x22c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d105      	bne.n	80005c4 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <GPIO_PeriClockControl+0x204>)
 80005be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020400 	.word	0x40020400
 80005dc:	40020800 	.word	0x40020800
 80005e0:	40020c00 	.word	0x40020c00
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40021400 	.word	0x40021400
 80005ec:	40021800 	.word	0x40021800
 80005f0:	40021c00 	.word	0x40021c00
 80005f4:	40022000 	.word	0x40022000
 80005f8:	40022400 	.word	0x40022400
 80005fc:	40022800 	.word	0x40022800

08000600 <GPIO_Init>:
 * @return				- none
 *
 * @Note 				- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp register
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fedc 	bl	80003d0 <GPIO_PeriClockControl>

	//1. Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	795b      	ldrb	r3, [r3, #5]
 800061c:	2b03      	cmp	r3, #3
 800061e:	d81f      	bhi.n	8000660 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	4619      	mov	r1, r3
 800063e:	2303      	movs	r3, #3
 8000640:	408b      	lsls	r3, r1
 8000642:	43db      	mvns	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	400a      	ands	r2, r1
 800064c:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->MODER |= temp; //Setting
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6819      	ldr	r1, [r3, #0]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	430a      	orrs	r2, r1
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	e0dc      	b.n	800081a <GPIO_Init+0x21a>
	}
	else /* Interrupt mode */
	{

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	795b      	ldrb	r3, [r3, #5]
 8000664:	2b04      	cmp	r3, #4
 8000666:	d117      	bne.n	8000698 <GPIO_Init+0x98>
		{
			//1.Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000668:	4b51      	ldr	r3, [pc, #324]	; (80007b0 <GPIO_Init+0x1b0>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	7912      	ldrb	r2, [r2, #4]
 8000670:	4611      	mov	r1, r2
 8000672:	2201      	movs	r2, #1
 8000674:	408a      	lsls	r2, r1
 8000676:	4611      	mov	r1, r2
 8000678:	4a4d      	ldr	r2, [pc, #308]	; (80007b0 <GPIO_Init+0x1b0>)
 800067a:	430b      	orrs	r3, r1
 800067c:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <GPIO_Init+0x1b0>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	7912      	ldrb	r2, [r2, #4]
 8000686:	4611      	mov	r1, r2
 8000688:	2201      	movs	r2, #1
 800068a:	408a      	lsls	r2, r1
 800068c:	43d2      	mvns	r2, r2
 800068e:	4611      	mov	r1, r2
 8000690:	4a47      	ldr	r2, [pc, #284]	; (80007b0 <GPIO_Init+0x1b0>)
 8000692:	400b      	ands	r3, r1
 8000694:	6093      	str	r3, [r2, #8]
 8000696:	e035      	b.n	8000704 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	795b      	ldrb	r3, [r3, #5]
 800069c:	2b05      	cmp	r3, #5
 800069e:	d117      	bne.n	80006d0 <GPIO_Init+0xd0>
		{
			//1.Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a0:	4b43      	ldr	r3, [pc, #268]	; (80007b0 <GPIO_Init+0x1b0>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	7912      	ldrb	r2, [r2, #4]
 80006a8:	4611      	mov	r1, r2
 80006aa:	2201      	movs	r2, #1
 80006ac:	408a      	lsls	r2, r1
 80006ae:	4611      	mov	r1, r2
 80006b0:	4a3f      	ldr	r2, [pc, #252]	; (80007b0 <GPIO_Init+0x1b0>)
 80006b2:	430b      	orrs	r3, r1
 80006b4:	6093      	str	r3, [r2, #8]
			//Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b6:	4b3e      	ldr	r3, [pc, #248]	; (80007b0 <GPIO_Init+0x1b0>)
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	7912      	ldrb	r2, [r2, #4]
 80006be:	4611      	mov	r1, r2
 80006c0:	2201      	movs	r2, #1
 80006c2:	408a      	lsls	r2, r1
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a39      	ldr	r2, [pc, #228]	; (80007b0 <GPIO_Init+0x1b0>)
 80006ca:	400b      	ands	r3, r1
 80006cc:	60d3      	str	r3, [r2, #12]
 80006ce:	e019      	b.n	8000704 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	795b      	ldrb	r3, [r3, #5]
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d115      	bne.n	8000704 <GPIO_Init+0x104>
		{
			//1.Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <GPIO_Init+0x1b0>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a31      	ldr	r2, [pc, #196]	; (80007b0 <GPIO_Init+0x1b0>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ee:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <GPIO_Init+0x1b0>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	7912      	ldrb	r2, [r2, #4]
 80006f6:	4611      	mov	r1, r2
 80006f8:	2201      	movs	r2, #1
 80006fa:	408a      	lsls	r2, r1
 80006fc:	4611      	mov	r1, r2
 80006fe:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <GPIO_Init+0x1b0>)
 8000700:	430b      	orrs	r3, r1
 8000702:	6093      	str	r3, [r2, #8]
		}

		//2.Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	089b      	lsrs	r3, r3, #2
 800070a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	f003 0303 	and.w	r3, r3, #3
 8000714:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <GPIO_Init+0x1b4>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d05f      	beq.n	80007e0 <GPIO_Init+0x1e0>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <GPIO_Init+0x1b8>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d040      	beq.n	80007ac <GPIO_Init+0x1ac>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a23      	ldr	r2, [pc, #140]	; (80007bc <GPIO_Init+0x1bc>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d039      	beq.n	80007a8 <GPIO_Init+0x1a8>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <GPIO_Init+0x1c0>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d032      	beq.n	80007a4 <GPIO_Init+0x1a4>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <GPIO_Init+0x1c4>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d02b      	beq.n	80007a0 <GPIO_Init+0x1a0>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a1e      	ldr	r2, [pc, #120]	; (80007c8 <GPIO_Init+0x1c8>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d024      	beq.n	800079c <GPIO_Init+0x19c>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <GPIO_Init+0x1cc>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d01d      	beq.n	8000798 <GPIO_Init+0x198>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <GPIO_Init+0x1d0>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d016      	beq.n	8000794 <GPIO_Init+0x194>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a1a      	ldr	r2, [pc, #104]	; (80007d4 <GPIO_Init+0x1d4>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d00f      	beq.n	8000790 <GPIO_Init+0x190>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <GPIO_Init+0x1d8>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d008      	beq.n	800078c <GPIO_Init+0x18c>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a17      	ldr	r2, [pc, #92]	; (80007dc <GPIO_Init+0x1dc>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d101      	bne.n	8000788 <GPIO_Init+0x188>
 8000784:	230a      	movs	r3, #10
 8000786:	e02c      	b.n	80007e2 <GPIO_Init+0x1e2>
 8000788:	2300      	movs	r3, #0
 800078a:	e02a      	b.n	80007e2 <GPIO_Init+0x1e2>
 800078c:	2309      	movs	r3, #9
 800078e:	e028      	b.n	80007e2 <GPIO_Init+0x1e2>
 8000790:	2308      	movs	r3, #8
 8000792:	e026      	b.n	80007e2 <GPIO_Init+0x1e2>
 8000794:	2307      	movs	r3, #7
 8000796:	e024      	b.n	80007e2 <GPIO_Init+0x1e2>
 8000798:	2306      	movs	r3, #6
 800079a:	e022      	b.n	80007e2 <GPIO_Init+0x1e2>
 800079c:	2305      	movs	r3, #5
 800079e:	e020      	b.n	80007e2 <GPIO_Init+0x1e2>
 80007a0:	2304      	movs	r3, #4
 80007a2:	e01e      	b.n	80007e2 <GPIO_Init+0x1e2>
 80007a4:	2303      	movs	r3, #3
 80007a6:	e01c      	b.n	80007e2 <GPIO_Init+0x1e2>
 80007a8:	2302      	movs	r3, #2
 80007aa:	e01a      	b.n	80007e2 <GPIO_Init+0x1e2>
 80007ac:	2301      	movs	r3, #1
 80007ae:	e018      	b.n	80007e2 <GPIO_Init+0x1e2>
 80007b0:	40013c00 	.word	0x40013c00
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020c00 	.word	0x40020c00
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40021400 	.word	0x40021400
 80007cc:	40021800 	.word	0x40021800
 80007d0:	40021c00 	.word	0x40021c00
 80007d4:	40022000 	.word	0x40022000
 80007d8:	40022400 	.word	0x40022400
 80007dc:	40022800 	.word	0x40022800
 80007e0:	2300      	movs	r3, #0
 80007e2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80007e4:	4b5c      	ldr	r3, [pc, #368]	; (8000958 <GPIO_Init+0x358>)
 80007e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e8:	4a5b      	ldr	r2, [pc, #364]	; (8000958 <GPIO_Init+0x358>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ee:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode <<(temp2 * 4);
 80007f0:	7c7a      	ldrb	r2, [r7, #17]
 80007f2:	7cbb      	ldrb	r3, [r7, #18]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	fa02 f103 	lsl.w	r1, r2, r3
 80007fa:	4a58      	ldr	r2, [pc, #352]	; (800095c <GPIO_Init+0x35c>)
 80007fc:	7cfb      	ldrb	r3, [r7, #19]
 80007fe:	3302      	adds	r3, #2
 8000800:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3.Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000804:	4b56      	ldr	r3, [pc, #344]	; (8000960 <GPIO_Init+0x360>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	7912      	ldrb	r2, [r2, #4]
 800080c:	4611      	mov	r1, r2
 800080e:	2201      	movs	r2, #1
 8000810:	408a      	lsls	r2, r1
 8000812:	4611      	mov	r1, r2
 8000814:	4a52      	ldr	r2, [pc, #328]	; (8000960 <GPIO_Init+0x360>)
 8000816:	430b      	orrs	r3, r1
 8000818:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

	//2. Configure the speed of the GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	799b      	ldrb	r3, [r3, #6]
 8000822:	461a      	mov	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	4619      	mov	r1, r3
 800083c:	2303      	movs	r3, #3
 800083e:	408b      	lsls	r3, r1
 8000840:	43db      	mvns	r3, r3
 8000842:	4619      	mov	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	400a      	ands	r2, r1
 800084a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6899      	ldr	r1, [r3, #8]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	430a      	orrs	r2, r1
 800085a:	609a      	str	r2, [r3, #8]
	temp = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	79db      	ldrb	r3, [r3, #7]
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	791b      	ldrb	r3, [r3, #4]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	4619      	mov	r1, r3
 800087e:	2303      	movs	r3, #3
 8000880:	408b      	lsls	r3, r1
 8000882:	43db      	mvns	r3, r3
 8000884:	4619      	mov	r1, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	400a      	ands	r2, r1
 800088c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68d9      	ldr	r1, [r3, #12]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	430a      	orrs	r2, r1
 800089c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]

	//4. Configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7a1b      	ldrb	r3, [r3, #8]
 80008a6:	461a      	mov	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	4619      	mov	r1, r3
 80008be:	2301      	movs	r3, #1
 80008c0:	408b      	lsls	r3, r1
 80008c2:	43db      	mvns	r3, r3
 80008c4:	4619      	mov	r1, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	400a      	ands	r2, r1
 80008cc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6859      	ldr	r1, [r3, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	430a      	orrs	r2, r1
 80008dc:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]

	//5. Configure the alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	795b      	ldrb	r3, [r3, #5]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d131      	bne.n	800094e <GPIO_Init+0x34e>
	{
		//Configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	791b      	ldrb	r3, [r3, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	7c3a      	ldrb	r2, [r7, #16]
 8000902:	3208      	adds	r2, #8
 8000904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	220f      	movs	r2, #15
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	7c3a      	ldrb	r2, [r7, #16]
 800091c:	4001      	ands	r1, r0
 800091e:	3208      	adds	r2, #8
 8000920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	7c3a      	ldrb	r2, [r7, #16]
 800092a:	3208      	adds	r2, #8
 800092c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7a5b      	ldrb	r3, [r3, #9]
 8000934:	461a      	mov	r2, r3
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	7c3a      	ldrb	r2, [r7, #16]
 8000946:	4301      	orrs	r1, r0
 8000948:	3208      	adds	r2, #8
 800094a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40013800 	.word	0x40013800
 8000960:	40013c00 	.word	0x40013c00

08000964 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @Note 				- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & (0x00000001));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	691a      	ldr	r2, [r3, #16]
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	fa22 f303 	lsr.w	r3, r2, r3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
	return value;
 8000982:	7bfb      	ldrb	r3, [r7, #15]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
	...

08000990 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <RCC_GetPCLK1Value+0xa0>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 80009a4:	7a7b      	ldrb	r3, [r7, #9]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <RCC_GetPCLK1Value+0x20>
	{
		// HSI clock source
		SystemClk = 16000000;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <RCC_GetPCLK1Value+0xa4>)
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e00b      	b.n	80009c8 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 80009b0:	7a7b      	ldrb	r3, [r7, #9]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d102      	bne.n	80009bc <RCC_GetPCLK1Value+0x2c>
	{
		// HSE clock source
		SystemClk = 8000000;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <RCC_GetPCLK1Value+0xa8>)
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e005      	b.n	80009c8 <RCC_GetPCLK1Value+0x38>

	}
	else if (clksrc == 2)
 80009bc:	7a7b      	ldrb	r3, [r7, #9]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d102      	bne.n	80009c8 <RCC_GetPCLK1Value+0x38>
	{
		// PLL is not used in this course
		// TODO: Write function to determine PLL output clock
		SystemClk = RCC_GetPLLOutputClock();
 80009c2:	f000 f88f 	bl	8000ae4 <RCC_GetPLLOutputClock>
 80009c6:	60f8      	str	r0, [r7, #12]
	}

	// Determine AHB prescaler from register
	temp = ((RCC->CFGR >> 4) & 0xF);
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <RCC_GetPCLK1Value+0xa0>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	091b      	lsrs	r3, r3, #4
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	f003 030f 	and.w	r3, r3, #15
 80009d4:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 80009d6:	7a3b      	ldrb	r3, [r7, #8]
 80009d8:	2b07      	cmp	r3, #7
 80009da:	d802      	bhi.n	80009e2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	72fb      	strb	r3, [r7, #11]
 80009e0:	e005      	b.n	80009ee <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp - 8];
 80009e2:	7a3b      	ldrb	r3, [r7, #8]
 80009e4:	3b08      	subs	r3, #8
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <RCC_GetPCLK1Value+0xac>)
 80009e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ec:	72fb      	strb	r3, [r7, #11]
	}

	// Determine APB1 prescaler from register
	temp = ((RCC->CFGR >> 10) & 0x7);
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <RCC_GetPCLK1Value+0xa0>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	0a9b      	lsrs	r3, r3, #10
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 80009fc:	7a3b      	ldrb	r3, [r7, #8]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d802      	bhi.n	8000a08 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	72bb      	strb	r3, [r7, #10]
 8000a06:	e005      	b.n	8000a14 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4];
 8000a08:	7a3b      	ldrb	r3, [r7, #8]
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <RCC_GetPCLK1Value+0xb0>)
 8000a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a12:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000a14:	7afb      	ldrb	r3, [r7, #11]
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a1c:	7abb      	ldrb	r3, [r7, #10]
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	00f42400 	.word	0x00f42400
 8000a38:	007a1200 	.word	0x007a1200
 8000a3c:	20000400 	.word	0x20000400
 8000a40:	20000410 	.word	0x20000410

08000a44 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <RCC_GetPCLK2Value+0x8c>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000a5c:	7a7b      	ldrb	r3, [r7, #9]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <RCC_GetPCLK2Value+0x90>)
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e001      	b.n	8000a6c <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <RCC_GetPCLK2Value+0x94>)
 8000a6a:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <RCC_GetPCLK2Value+0x8c>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	091b      	lsrs	r3, r3, #4
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b07      	cmp	r3, #7
 8000a7c:	d802      	bhi.n	8000a84 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	72fb      	strb	r3, [r7, #11]
 8000a82:	e005      	b.n	8000a90 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b08      	subs	r3, #8
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <RCC_GetPCLK2Value+0x98>)
 8000a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a8e:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <RCC_GetPCLK2Value+0x8c>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	0b5b      	lsrs	r3, r3, #13
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d802      	bhi.n	8000aa8 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	72bb      	strb	r3, [r7, #10]
 8000aa6:	e005      	b.n	8000ab4 <RCC_GetPCLK2Value+0x70>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <RCC_GetPCLK2Value+0x9c>)
 8000aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab2:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000ab4:	7afb      	ldrb	r3, [r7, #11]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000abc:	7abb      	ldrb	r3, [r7, #10]
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000ac4:	683b      	ldr	r3, [r7, #0]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	00f42400 	.word	0x00f42400
 8000ad8:	007a1200 	.word	0x007a1200
 8000adc:	20000400 	.word	0x20000400
 8000ae0:	20000410 	.word	0x20000410

08000ae4 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	// TODO: Write function to determine PLL output clock
	return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
	...

08000af4 <USART_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note 				- none
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi) {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d157      	bne.n	8000bb6 <USART_PeriClockControl+0xc2>
	{
		if (pUSARTx == USART1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <USART_PeriClockControl+0x17c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000b0e:	4b59      	ldr	r3, [pc, #356]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a58      	ldr	r2, [pc, #352]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pUSARTx == UART8)
		{
			UART8_PCLK_DI();
		}
	}
}
 8000b1a:	e0a3      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a56      	ldr	r2, [pc, #344]	; (8000c78 <USART_PeriClockControl+0x184>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d106      	bne.n	8000b32 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000b24:	4b53      	ldr	r3, [pc, #332]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a52      	ldr	r2, [pc, #328]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b30:	e098      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == USART3)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a51      	ldr	r2, [pc, #324]	; (8000c7c <USART_PeriClockControl+0x188>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d106      	bne.n	8000b48 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000b3a:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a4d      	ldr	r2, [pc, #308]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b46:	e08d      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == UART4)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a4d      	ldr	r2, [pc, #308]	; (8000c80 <USART_PeriClockControl+0x18c>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d106      	bne.n	8000b5e <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000b50:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a47      	ldr	r2, [pc, #284]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b5c:	e082      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == UART5)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a48      	ldr	r2, [pc, #288]	; (8000c84 <USART_PeriClockControl+0x190>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d106      	bne.n	8000b74 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000b66:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a42      	ldr	r2, [pc, #264]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b72:	e077      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == USART6)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a44      	ldr	r2, [pc, #272]	; (8000c88 <USART_PeriClockControl+0x194>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d106      	bne.n	8000b8a <USART_PeriClockControl+0x96>
			USART6_PCLK_EN();
 8000b7c:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	4a3c      	ldr	r2, [pc, #240]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b82:	f043 0320 	orr.w	r3, r3, #32
 8000b86:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b88:	e06c      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == UART7)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a3f      	ldr	r2, [pc, #252]	; (8000c8c <USART_PeriClockControl+0x198>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d106      	bne.n	8000ba0 <USART_PeriClockControl+0xac>
			UART7_PCLK_EN();
 8000b92:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b9e:	e061      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == UART8)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a3b      	ldr	r2, [pc, #236]	; (8000c90 <USART_PeriClockControl+0x19c>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d15d      	bne.n	8000c64 <USART_PeriClockControl+0x170>
			UART8_PCLK_EN();
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bb4:	e056      	b.n	8000c64 <USART_PeriClockControl+0x170>
		if (pUSARTx == USART1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a2d      	ldr	r2, [pc, #180]	; (8000c70 <USART_PeriClockControl+0x17c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d106      	bne.n	8000bcc <USART_PeriClockControl+0xd8>
			USART1_PCLK_DI();
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a2c      	ldr	r2, [pc, #176]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000bc4:	f023 0310 	bic.w	r3, r3, #16
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bca:	e04b      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == USART2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a2a      	ldr	r2, [pc, #168]	; (8000c78 <USART_PeriClockControl+0x184>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d106      	bne.n	8000be2 <USART_PeriClockControl+0xee>
			USART2_PCLK_DI();
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a26      	ldr	r2, [pc, #152]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000bda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000be0:	e040      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == USART3)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <USART_PeriClockControl+0x188>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d106      	bne.n	8000bf8 <USART_PeriClockControl+0x104>
			USART3_PCLK_DI();
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bf6:	e035      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == UART4)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <USART_PeriClockControl+0x18c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d106      	bne.n	8000c0e <USART_PeriClockControl+0x11a>
			UART4_PCLK_DI();
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c06:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c0c:	e02a      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == UART5)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <USART_PeriClockControl+0x190>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d106      	bne.n	8000c24 <USART_PeriClockControl+0x130>
			UART5_PCLK_DI();
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c22:	e01f      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == USART6)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <USART_PeriClockControl+0x194>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d106      	bne.n	8000c3a <USART_PeriClockControl+0x146>
			USART6_PCLK_DI();
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c32:	f023 0320 	bic.w	r3, r3, #32
 8000c36:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c38:	e014      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == UART7)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <USART_PeriClockControl+0x198>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d106      	bne.n	8000c50 <USART_PeriClockControl+0x15c>
			UART7_PCLK_DI();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c4e:	e009      	b.n	8000c64 <USART_PeriClockControl+0x170>
		else if (pUSARTx == UART8)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <USART_PeriClockControl+0x19c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d105      	bne.n	8000c64 <USART_PeriClockControl+0x170>
			UART8_PCLK_DI();
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <USART_PeriClockControl+0x180>)
 8000c5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40011000 	.word	0x40011000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40004800 	.word	0x40004800
 8000c80:	40004c00 	.word	0x40004c00
 8000c84:	40005000 	.word	0x40005000
 8000c88:	40011400 	.word	0x40011400
 8000c8c:	40007800 	.word	0x40007800
 8000c90:	40007c00 	.word	0x40007c00

08000c94 <USART_PeripheralControl>:
 * @return				- none
 *
 * @Note 				- Must configure USART parameters before enabling
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d106      	bne.n	8000cb4 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f043 0201 	orr.w	r2, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000cb2:	e005      	b.n	8000cc0 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f023 0201 	bic.w	r2, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <USART_Init>:
 * @return				- none
 *
 * @Note 				- none
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/
	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff09 	bl	8000af4 <USART_PeriClockControl>
	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	791b      	ldrb	r3, [r3, #4]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d104      	bne.n	8000cf4 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e010      	b.n	8000d16 <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d104      	bne.n	8000d06 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e007      	b.n	8000d16 <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d103      	bne.n	8000d16 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f043 030c 	orr.w	r3, r3, #12
 8000d14:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7b5b      	ldrb	r3, [r3, #13]
 8000d1a:	031b      	lsls	r3, r3, #12
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

	//Configuration of parity control bit fields
	if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7b9b      	ldrb	r3, [r3, #14]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d104      	bne.n	8000d36 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	e00b      	b.n	8000d4e <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}
	else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7b9b      	ldrb	r3, [r3, #14]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d107      	bne.n	8000d4e <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d44:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable ODD parity
		tempreg |= (1 << USART_CR1_PS);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4c:	60fb      	str	r3, [r7, #12]

	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	601a      	str	r2, [r3, #0]

	/******************************** Configuration of CR2******************************************/

	tempreg = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7b1b      	ldrb	r3, [r3, #12]
 8000d5e:	031b      	lsls	r3, r3, #12
 8000d60:	461a      	mov	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	605a      	str	r2, [r3, #4]

	/******************************** Configuration of CR3******************************************/

	tempreg = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7bdb      	ldrb	r3, [r3, #15]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d104      	bne.n	8000d86 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e014      	b.n	8000db0 <USART_Init+0xe6>

	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl== USART_HW_FLOW_CTRL_RTS)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7bdb      	ldrb	r3, [r3, #15]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d104      	bne.n	8000d98 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e00b      	b.n	8000db0 <USART_Init+0xe6>

	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7bdb      	ldrb	r3, [r3, #15]
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d107      	bne.n	8000db0 <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dae:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	609a      	str	r2, [r3, #8]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	f000 f818 	bl	8000df8 <USART_SetBaudRate>
			pUSARTHandle->USART_Config.USART_Baud);
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <USART_GetFlagStatus>:
 * @return				- none
 *
 * @Note 				- none
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t StatusFlagName)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	if(pUSARTx->ISR & StatusFlagName)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69da      	ldr	r2, [r3, #28]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <USART_GetFlagStatus+0x1a>
	{
		return SET;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <USART_GetFlagStatus+0x1c>
	}
	return RESET;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
	...

08000df8 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	//Variable to hold the APB clock
	uint32_t PCLKx;

	uint32_t usartdiv;

	uint32_t tempreg=0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <USART_SetBaudRate+0x88>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d003      	beq.n	8000e16 <USART_SetBaudRate+0x1e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <USART_SetBaudRate+0x8c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d103      	bne.n	8000e1e <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000e16:	f7ff fe15 	bl	8000a44 <RCC_GetPCLK2Value>
 8000e1a:	6178      	str	r0, [r7, #20]
 8000e1c:	e002      	b.n	8000e24 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000e1e:	f7ff fdb7 	bl	8000990 <RCC_GetPCLK1Value>
 8000e22:	6178      	str	r0, [r7, #20]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d018      	beq.n	8000e62 <USART_SetBaudRate+0x6a>
  {
	   //OVER8 = 1 , over sampling by 8
	  usartdiv = (((PCLKx * 2) + (BaudRate / 2)) / BaudRate);     // Rounded up.
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005a      	lsls	r2, r3, #1
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	085b      	lsrs	r3, r3, #1
 8000e38:	441a      	add	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e40:	60fb      	str	r3, [r7, #12]
      tempreg = (uint16_t)(usartdiv & 0xFFF0);                    // BRR[15:4] = USARTDIV[15:4]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
      tempreg |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1);  // BRR[2:0]  = USARTDIV[3:0] shifted 1 bit to the right.
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	085b      	lsrs	r3, r3, #1
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	e007      	b.n	8000e72 <USART_SetBaudRate+0x7a>
  }
  else
  {
	   //over sampling by 16
      tempreg = ((PCLKx + (BaudRate / 2)) / BaudRate); // BRR = USARTDIV. Rounded up.
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	085a      	lsrs	r2, r3, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	441a      	add	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e70:	613b      	str	r3, [r7, #16]
  }
  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	60da      	str	r2, [r3, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40011000 	.word	0x40011000
 8000e84:	40011400 	.word	0x40011400

08000e88 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxbuffer, uint32_t Len)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	e031      	b.n	8000efe <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000e9a:	bf00      	nop
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff94 	bl	8000dd0 <USART_GetFlagStatus>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f6      	beq.n	8000e9c <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	7b5b      	ldrb	r3, [r3, #13]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d118      	bne.n	8000ee8 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxbuffer;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	7b9b      	ldrb	r3, [r3, #14]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxbuffer++;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
				pTxbuffer++;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3301      	adds	r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	e00b      	b.n	8000ef8 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxbuffer++;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	e007      	b.n	8000ef8 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->TDR = (*pTxbuffer  & (uint8_t)0xFF);
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	629a      	str	r2, [r3, #40]	; 0x28

			//Implement the code to increment the buffer address
			pTxbuffer++;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3301      	adds	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3c9      	bcc.n	8000e9a <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000f06:	bf00      	nop
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2140      	movs	r1, #64	; 0x40
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff5e 	bl	8000dd0 <USART_GetFlagStatus>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f6      	beq.n	8000f08 <USART_SendData+0x80>
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <__libc_init_array>:
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	4d0d      	ldr	r5, [pc, #52]	; (8000f5c <__libc_init_array+0x38>)
 8000f28:	4c0d      	ldr	r4, [pc, #52]	; (8000f60 <__libc_init_array+0x3c>)
 8000f2a:	1b64      	subs	r4, r4, r5
 8000f2c:	10a4      	asrs	r4, r4, #2
 8000f2e:	2600      	movs	r6, #0
 8000f30:	42a6      	cmp	r6, r4
 8000f32:	d109      	bne.n	8000f48 <__libc_init_array+0x24>
 8000f34:	4d0b      	ldr	r5, [pc, #44]	; (8000f64 <__libc_init_array+0x40>)
 8000f36:	4c0c      	ldr	r4, [pc, #48]	; (8000f68 <__libc_init_array+0x44>)
 8000f38:	f000 f818 	bl	8000f6c <_init>
 8000f3c:	1b64      	subs	r4, r4, r5
 8000f3e:	10a4      	asrs	r4, r4, #2
 8000f40:	2600      	movs	r6, #0
 8000f42:	42a6      	cmp	r6, r4
 8000f44:	d105      	bne.n	8000f52 <__libc_init_array+0x2e>
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
 8000f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f4c:	4798      	blx	r3
 8000f4e:	3601      	adds	r6, #1
 8000f50:	e7ee      	b.n	8000f30 <__libc_init_array+0xc>
 8000f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f56:	4798      	blx	r3
 8000f58:	3601      	adds	r6, #1
 8000f5a:	e7f2      	b.n	8000f42 <__libc_init_array+0x1e>
 8000f5c:	08000f84 	.word	0x08000f84
 8000f60:	08000f84 	.word	0x08000f84
 8000f64:	08000f84 	.word	0x08000f84
 8000f68:	08000f88 	.word	0x08000f88

08000f6c <_init>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr

08000f78 <_fini>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr
