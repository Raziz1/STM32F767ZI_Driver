
STM32F767ZI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001108  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001300  08001300  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001300  08001300  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08001300  08001300  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001300  08001300  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001300  08001300  00011300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001304  08001304  00011304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08001308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000078  08001380  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001380  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000180e  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000531  00000000  00000000  000218f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000153  00000000  00000000  00021ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000029f2  00000000  00000000  00022143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002187  00000000  00000000  00024b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000af2a  00000000  00000000  00026cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006b8  00000000  00000000  00031be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  000322a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	080012e8 	.word	0x080012e8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	080012e8 	.word	0x080012e8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <I2C1_GPIOInits>:

// PB8 -> I2C1_SCL
// PB9 -> I2C1_SDA

void I2C1_GPIOInits(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <I2C1_GPIOInits+0x40>)
 8000250:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000252:	2302      	movs	r3, #2
 8000254:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000256:	2301      	movs	r3, #1
 8000258:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 800025a:	2301      	movs	r3, #1
 800025c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800025e:	2304      	movs	r3, #4
 8000260:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000262:	2302      	movs	r3, #2
 8000264:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000266:	2308      	movs	r3, #8
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f9ff 	bl	8000670 <GPIO_Init>

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000272:	2309      	movs	r3, #9
 8000274:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f9f9 	bl	8000670 <GPIO_Init>
}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40020400 	.word	0x40020400

0800028c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <I2C1_Inits+0x20>)
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <I2C1_Inits+0x24>)
 8000294:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR; // only needed if slave mode (@see protocol reference for reserved addresses)
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <I2C1_Inits+0x20>)
 8000298:	2261      	movs	r2, #97	; 0x61
 800029a:	721a      	strb	r2, [r3, #8]
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM100K;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <I2C1_Inits+0x20>)
 800029e:	2201      	movs	r2, #1
 80002a0:	605a      	str	r2, [r3, #4]
    I2C_Init(&I2C1Handle);
 80002a2:	4802      	ldr	r0, [pc, #8]	; (80002ac <I2C1_Inits+0x20>)
 80002a4:	f000 fc94 	bl	8000bd0 <I2C_Init>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000094 	.word	0x20000094
 80002b0:	40005400 	.word	0x40005400

080002b4 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIObtn;
	//GPIO button
	GPIObtn.pGPIOx = GPIOC;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <GPIO_ButtonInit+0x34>)
 80002bc:	607b      	str	r3, [r7, #4]
	GPIObtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002be:	230d      	movs	r3, #13
 80002c0:	723b      	strb	r3, [r7, #8]
	GPIObtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002c2:	2300      	movs	r3, #0
 80002c4:	727b      	strb	r3, [r7, #9]
	GPIObtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002c6:	2302      	movs	r3, #2
 80002c8:	72bb      	strb	r3, [r7, #10]
	GPIObtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ca:	2300      	movs	r3, #0
 80002cc:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 80002ce:	2101      	movs	r1, #1
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <GPIO_ButtonInit+0x34>)
 80002d2:	f000 f8b5 	bl	8000440 <GPIO_PeriClockControl>
	GPIO_Init(&GPIObtn);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f9c9 	bl	8000670 <GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020800 	.word	0x40020800

080002ec <main>:

int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	//Initialize user button
	GPIO_ButtonInit();
 80002f0:	f7ff ffe0 	bl	80002b4 <GPIO_ButtonInit>

	//I2C pin inits
	I2C1_GPIOInits();
 80002f4:	f7ff ffa8 	bl	8000248 <I2C1_GPIOInits>

	//I2C peripheral configuration
	I2C1_Inits();
 80002f8:	f7ff ffc8 	bl	800028c <I2C1_Inits>

	//Enable the I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002fc:	2101      	movs	r1, #1
 80002fe:	4808      	ldr	r0, [pc, #32]	; (8000320 <main+0x34>)
 8000300:	f000 fc4a 	bl	8000b98 <I2C_PeripheralControl>

    I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	201f      	movs	r0, #31
 8000308:	f000 fcdc 	bl	8000cc4 <I2C_IRQInterruptConfig>

    // enable the I2C peripheral
    I2C_PeripheralControl(I2C1, ENABLE);
 800030c:	2101      	movs	r1, #1
 800030e:	4804      	ldr	r0, [pc, #16]	; (8000320 <main+0x34>)
 8000310:	f000 fc42 	bl	8000b98 <I2C_PeripheralControl>

    I2C_SlaveEnableDisableCallbackEvents(I2C1, ENABLE);
 8000314:	2101      	movs	r1, #1
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <main+0x34>)
 8000318:	f000 ff5c 	bl	80011d4 <I2C_SlaveEnableDisableCallbackEvents>

    while (1);
 800031c:	e7fe      	b.n	800031c <main+0x30>
 800031e:	bf00      	nop
 8000320:	40005400 	.word	0x40005400

08000324 <I2C2_EV_IRQHandler>:
}

void I2C2_EV_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    I2C_EV_IRQHandling(&I2C1Handle);
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <I2C2_EV_IRQHandler+0x10>)
 800032a:	f000 fdd2 	bl	8000ed2 <I2C_EV_IRQHandling>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000094 	.word	0x20000094

08000338 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
    I2C_ER_IRQHandling(&I2C1Handle);
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <I2C2_ER_IRQHandler+0x10>)
 800033e:	f000 fedb 	bl	80010f8 <I2C_ER_IRQHandling>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000094 	.word	0x20000094

0800034c <I2C_ApplicationEventCallback>:

uint8_t commandCode = 0;

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEvent)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
    static uint8_t commandCode = 0;
    static uint8_t Cnt = 0;

    if(AppEvent == I2C_EV_DATA_REQ)
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2b04      	cmp	r3, #4
 800035c:	d123      	bne.n	80003a6 <I2C_ApplicationEventCallback+0x5a>
    {
        // master requests some data
        if (commandCode == 0x51)
 800035e:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <I2C_ApplicationEventCallback+0x94>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b51      	cmp	r3, #81	; 0x51
 8000364:	d10b      	bne.n	800037e <I2C_ApplicationEventCallback+0x32>
        {
            // send the length information
            I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char *)Tx_buf));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681c      	ldr	r4, [r3, #0]
 800036a:	481e      	ldr	r0, [pc, #120]	; (80003e4 <I2C_ApplicationEventCallback+0x98>)
 800036c:	f7ff ff64 	bl	8000238 <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4619      	mov	r1, r3
 8000376:	4620      	mov	r0, r4
 8000378:	f000 ff77 	bl	800126a <I2C_SlaveSendData>
		//Master has sent the NACK. so slave should understand that master doesnt need
		//more data.
		commandCode = 0xff;
		Cnt = 0;
    }
}
 800037c:	e02c      	b.n	80003d8 <I2C_ApplicationEventCallback+0x8c>
        }else if (commandCode == 0x52)
 800037e:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <I2C_ApplicationEventCallback+0x94>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b52      	cmp	r3, #82	; 0x52
 8000384:	d128      	bne.n	80003d8 <I2C_ApplicationEventCallback+0x8c>
            I2C_SlaveSendData(pI2CHandle->pI2Cx, Tx_buf[Cnt++]);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <I2C_ApplicationEventCallback+0x9c>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	1c59      	adds	r1, r3, #1
 8000390:	b2c8      	uxtb	r0, r1
 8000392:	4915      	ldr	r1, [pc, #84]	; (80003e8 <I2C_ApplicationEventCallback+0x9c>)
 8000394:	7008      	strb	r0, [r1, #0]
 8000396:	4619      	mov	r1, r3
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <I2C_ApplicationEventCallback+0x98>)
 800039a:	5c5b      	ldrb	r3, [r3, r1]
 800039c:	4619      	mov	r1, r3
 800039e:	4610      	mov	r0, r2
 80003a0:	f000 ff63 	bl	800126a <I2C_SlaveSendData>
}
 80003a4:	e018      	b.n	80003d8 <I2C_ApplicationEventCallback+0x8c>
    }else if(AppEvent == I2C_EV_DATA_RCV)
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	2b05      	cmp	r3, #5
 80003aa:	d109      	bne.n	80003c0 <I2C_ApplicationEventCallback+0x74>
        commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 ff68 	bl	8001286 <I2C_SlaveReceiveData>
 80003b6:	4603      	mov	r3, r0
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <I2C_ApplicationEventCallback+0x94>)
 80003bc:	701a      	strb	r2, [r3, #0]
}
 80003be:	e00b      	b.n	80003d8 <I2C_ApplicationEventCallback+0x8c>
    }else if(AppEvent == I2C_EV_STOP)
 80003c0:	78fb      	ldrb	r3, [r7, #3]
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	d008      	beq.n	80003d8 <I2C_ApplicationEventCallback+0x8c>
    }else if(AppEvent == I2C_EV_NACK)
 80003c6:	78fb      	ldrb	r3, [r7, #3]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	d105      	bne.n	80003d8 <I2C_ApplicationEventCallback+0x8c>
		commandCode = 0xff;
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <I2C_ApplicationEventCallback+0x94>)
 80003ce:	22ff      	movs	r2, #255	; 0xff
 80003d0:	701a      	strb	r2, [r3, #0]
		Cnt = 0;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <I2C_ApplicationEventCallback+0x9c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd90      	pop	{r4, r7, pc}
 80003e0:	200000bc 	.word	0x200000bc
 80003e4:	20000000 	.word	0x20000000
 80003e8:	200000bd 	.word	0x200000bd

080003ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ec:	480d      	ldr	r0, [pc, #52]	; (8000424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	; (800042c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <LoopForever+0xe>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	; (8000438 <LoopForever+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041a:	f000 ff41 	bl	80012a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041e:	f7ff ff65 	bl	80002ec <main>

08000422 <LoopForever>:

LoopForever:
  b LoopForever
 8000422:	e7fe      	b.n	8000422 <LoopForever>
  ldr   r0, =_estack
 8000424:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800042c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000430:	08001308 	.word	0x08001308
  ldr r2, =_sbss
 8000434:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000438:	200000c0 	.word	0x200000c0

0800043c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC_IRQHandler>
	...

08000440 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note 				- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d178      	bne.n	8000544 <GPIO_PeriClockControl+0x104>
	{
		if (pGPIOx == GPIOA)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a7a      	ldr	r2, [pc, #488]	; (8000640 <GPIO_PeriClockControl+0x200>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800045a:	4b7a      	ldr	r3, [pc, #488]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	4a79      	ldr	r2, [pc, #484]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOK)
		{
			GPIOK_PCLK_DI();
		}
	}
}
 8000466:	e0e5      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOB)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a77      	ldr	r2, [pc, #476]	; (8000648 <GPIO_PeriClockControl+0x208>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000470:	4b74      	ldr	r3, [pc, #464]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a73      	ldr	r2, [pc, #460]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047c:	e0da      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOC)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a72      	ldr	r2, [pc, #456]	; (800064c <GPIO_PeriClockControl+0x20c>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000486:	4b6f      	ldr	r3, [pc, #444]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4a6e      	ldr	r2, [pc, #440]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000492:	e0cf      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOD)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a6e      	ldr	r2, [pc, #440]	; (8000650 <GPIO_PeriClockControl+0x210>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800049c:	4b69      	ldr	r3, [pc, #420]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4a68      	ldr	r2, [pc, #416]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a8:	e0c4      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOE)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a69      	ldr	r2, [pc, #420]	; (8000654 <GPIO_PeriClockControl+0x214>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004b2:	4b64      	ldr	r3, [pc, #400]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a63      	ldr	r2, [pc, #396]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80004b8:	f043 0310 	orr.w	r3, r3, #16
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004be:	e0b9      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOF)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a65      	ldr	r2, [pc, #404]	; (8000658 <GPIO_PeriClockControl+0x218>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004c8:	4b5e      	ldr	r3, [pc, #376]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	4a5d      	ldr	r2, [pc, #372]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80004ce:	f043 0320 	orr.w	r3, r3, #32
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d4:	e0ae      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOG)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a60      	ldr	r2, [pc, #384]	; (800065c <GPIO_PeriClockControl+0x21c>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004de:	4b59      	ldr	r3, [pc, #356]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a58      	ldr	r2, [pc, #352]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80004e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ea:	e0a3      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOH)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a5c      	ldr	r2, [pc, #368]	; (8000660 <GPIO_PeriClockControl+0x220>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004f4:	4b53      	ldr	r3, [pc, #332]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a52      	ldr	r2, [pc, #328]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80004fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	e098      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOI)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a57      	ldr	r2, [pc, #348]	; (8000664 <GPIO_PeriClockControl+0x224>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 800050a:	4b4e      	ldr	r3, [pc, #312]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a4d      	ldr	r2, [pc, #308]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000516:	e08d      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a53      	ldr	r2, [pc, #332]	; (8000668 <GPIO_PeriClockControl+0x228>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000520:	4b48      	ldr	r3, [pc, #288]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a47      	ldr	r2, [pc, #284]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052c:	e082      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOK)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a4e      	ldr	r2, [pc, #312]	; (800066c <GPIO_PeriClockControl+0x22c>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d17e      	bne.n	8000634 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 8000536:	4b43      	ldr	r3, [pc, #268]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a42      	ldr	r2, [pc, #264]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800053c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000542:	e077      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		if (pGPIOx == GPIOA)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a3e      	ldr	r2, [pc, #248]	; (8000640 <GPIO_PeriClockControl+0x200>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d106      	bne.n	800055a <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 800054c:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a3c      	ldr	r2, [pc, #240]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000552:	f023 0301 	bic.w	r3, r3, #1
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	e06c      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOB)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a3a      	ldr	r2, [pc, #232]	; (8000648 <GPIO_PeriClockControl+0x208>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 8000562:	4b38      	ldr	r3, [pc, #224]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a37      	ldr	r2, [pc, #220]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000568:	f023 0302 	bic.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056e:	e061      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOC)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a36      	ldr	r2, [pc, #216]	; (800064c <GPIO_PeriClockControl+0x20c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d106      	bne.n	8000586 <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 8000578:	4b32      	ldr	r3, [pc, #200]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a31      	ldr	r2, [pc, #196]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800057e:	f023 0304 	bic.w	r3, r3, #4
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000584:	e056      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOD)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a31      	ldr	r2, [pc, #196]	; (8000650 <GPIO_PeriClockControl+0x210>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d106      	bne.n	800059c <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2c      	ldr	r2, [pc, #176]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000594:	f023 0308 	bic.w	r3, r3, #8
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059a:	e04b      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOE)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <GPIO_PeriClockControl+0x214>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d106      	bne.n	80005b2 <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80005aa:	f023 0310 	bic.w	r3, r3, #16
 80005ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b0:	e040      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOF)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <GPIO_PeriClockControl+0x218>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a21      	ldr	r2, [pc, #132]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80005c0:	f023 0320 	bic.w	r3, r3, #32
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c6:	e035      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOG)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a24      	ldr	r2, [pc, #144]	; (800065c <GPIO_PeriClockControl+0x21c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d106      	bne.n	80005de <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80005d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005dc:	e02a      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOH)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <GPIO_PeriClockControl+0x220>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d106      	bne.n	80005f4 <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a16      	ldr	r2, [pc, #88]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80005ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f2:	e01f      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOI)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <GPIO_PeriClockControl+0x224>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <GPIO_PeriClockControl+0x204>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a10      	ldr	r2, [pc, #64]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000608:	e014      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOJ)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a16      	ldr	r2, [pc, #88]	; (8000668 <GPIO_PeriClockControl+0x228>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d106      	bne.n	8000620 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <GPIO_PeriClockControl+0x204>)
 8000618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061e:	e009      	b.n	8000634 <GPIO_PeriClockControl+0x1f4>
		else if (pGPIOx == GPIOK)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <GPIO_PeriClockControl+0x22c>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d105      	bne.n	8000634 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <GPIO_PeriClockControl+0x204>)
 800062e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40020000 	.word	0x40020000
 8000644:	40023800 	.word	0x40023800
 8000648:	40020400 	.word	0x40020400
 800064c:	40020800 	.word	0x40020800
 8000650:	40020c00 	.word	0x40020c00
 8000654:	40021000 	.word	0x40021000
 8000658:	40021400 	.word	0x40021400
 800065c:	40021800 	.word	0x40021800
 8000660:	40021c00 	.word	0x40021c00
 8000664:	40022000 	.word	0x40022000
 8000668:	40022400 	.word	0x40022400
 800066c:	40022800 	.word	0x40022800

08000670 <GPIO_Init>:
 * @return				- none
 *
 * @Note 				- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp register
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2101      	movs	r1, #1
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fedc 	bl	8000440 <GPIO_PeriClockControl>

	//1. Configure the mode of the GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	795b      	ldrb	r3, [r3, #5]
 800068c:	2b03      	cmp	r3, #3
 800068e:	d81f      	bhi.n	80006d0 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	461a      	mov	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	689a      	ldr	r2, [r3, #8]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2303      	movs	r3, #3
 80006b0:	408b      	lsls	r3, r1
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4619      	mov	r1, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	400a      	ands	r2, r1
 80006bc:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->MODER |= temp; //Setting
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e0dc      	b.n	800088a <GPIO_Init+0x21a>
	}
	else /* Interrupt mode */
	{

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	795b      	ldrb	r3, [r3, #5]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d117      	bne.n	8000708 <GPIO_Init+0x98>
		{
			//1.Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d8:	4b51      	ldr	r3, [pc, #324]	; (8000820 <GPIO_Init+0x1b0>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a4d      	ldr	r2, [pc, #308]	; (8000820 <GPIO_Init+0x1b0>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ee:	4b4c      	ldr	r3, [pc, #304]	; (8000820 <GPIO_Init+0x1b0>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	7912      	ldrb	r2, [r2, #4]
 80006f6:	4611      	mov	r1, r2
 80006f8:	2201      	movs	r2, #1
 80006fa:	408a      	lsls	r2, r1
 80006fc:	43d2      	mvns	r2, r2
 80006fe:	4611      	mov	r1, r2
 8000700:	4a47      	ldr	r2, [pc, #284]	; (8000820 <GPIO_Init+0x1b0>)
 8000702:	400b      	ands	r3, r1
 8000704:	6093      	str	r3, [r2, #8]
 8000706:	e035      	b.n	8000774 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	2b05      	cmp	r3, #5
 800070e:	d117      	bne.n	8000740 <GPIO_Init+0xd0>
		{
			//1.Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000710:	4b43      	ldr	r3, [pc, #268]	; (8000820 <GPIO_Init+0x1b0>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	7912      	ldrb	r2, [r2, #4]
 8000718:	4611      	mov	r1, r2
 800071a:	2201      	movs	r2, #1
 800071c:	408a      	lsls	r2, r1
 800071e:	4611      	mov	r1, r2
 8000720:	4a3f      	ldr	r2, [pc, #252]	; (8000820 <GPIO_Init+0x1b0>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6093      	str	r3, [r2, #8]
			//Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000726:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <GPIO_Init+0x1b0>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	7912      	ldrb	r2, [r2, #4]
 800072e:	4611      	mov	r1, r2
 8000730:	2201      	movs	r2, #1
 8000732:	408a      	lsls	r2, r1
 8000734:	43d2      	mvns	r2, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a39      	ldr	r2, [pc, #228]	; (8000820 <GPIO_Init+0x1b0>)
 800073a:	400b      	ands	r3, r1
 800073c:	60d3      	str	r3, [r2, #12]
 800073e:	e019      	b.n	8000774 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	795b      	ldrb	r3, [r3, #5]
 8000744:	2b06      	cmp	r3, #6
 8000746:	d115      	bne.n	8000774 <GPIO_Init+0x104>
		{
			//1.Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000748:	4b35      	ldr	r3, [pc, #212]	; (8000820 <GPIO_Init+0x1b0>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7912      	ldrb	r2, [r2, #4]
 8000750:	4611      	mov	r1, r2
 8000752:	2201      	movs	r2, #1
 8000754:	408a      	lsls	r2, r1
 8000756:	4611      	mov	r1, r2
 8000758:	4a31      	ldr	r2, [pc, #196]	; (8000820 <GPIO_Init+0x1b0>)
 800075a:	430b      	orrs	r3, r1
 800075c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800075e:	4b30      	ldr	r3, [pc, #192]	; (8000820 <GPIO_Init+0x1b0>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7912      	ldrb	r2, [r2, #4]
 8000766:	4611      	mov	r1, r2
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	4611      	mov	r1, r2
 800076e:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <GPIO_Init+0x1b0>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6093      	str	r3, [r2, #8]
		}

		//2.Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	089b      	lsrs	r3, r3, #2
 800077a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	f003 0303 	and.w	r3, r3, #3
 8000784:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a26      	ldr	r2, [pc, #152]	; (8000824 <GPIO_Init+0x1b4>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d05f      	beq.n	8000850 <GPIO_Init+0x1e0>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a24      	ldr	r2, [pc, #144]	; (8000828 <GPIO_Init+0x1b8>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d040      	beq.n	800081c <GPIO_Init+0x1ac>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <GPIO_Init+0x1bc>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d039      	beq.n	8000818 <GPIO_Init+0x1a8>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <GPIO_Init+0x1c0>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d032      	beq.n	8000814 <GPIO_Init+0x1a4>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a20      	ldr	r2, [pc, #128]	; (8000834 <GPIO_Init+0x1c4>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d02b      	beq.n	8000810 <GPIO_Init+0x1a0>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <GPIO_Init+0x1c8>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d024      	beq.n	800080c <GPIO_Init+0x19c>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <GPIO_Init+0x1cc>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d01d      	beq.n	8000808 <GPIO_Init+0x198>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <GPIO_Init+0x1d0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d016      	beq.n	8000804 <GPIO_Init+0x194>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <GPIO_Init+0x1d4>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d00f      	beq.n	8000800 <GPIO_Init+0x190>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a18      	ldr	r2, [pc, #96]	; (8000848 <GPIO_Init+0x1d8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d008      	beq.n	80007fc <GPIO_Init+0x18c>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <GPIO_Init+0x1dc>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d101      	bne.n	80007f8 <GPIO_Init+0x188>
 80007f4:	230a      	movs	r3, #10
 80007f6:	e02c      	b.n	8000852 <GPIO_Init+0x1e2>
 80007f8:	2300      	movs	r3, #0
 80007fa:	e02a      	b.n	8000852 <GPIO_Init+0x1e2>
 80007fc:	2309      	movs	r3, #9
 80007fe:	e028      	b.n	8000852 <GPIO_Init+0x1e2>
 8000800:	2308      	movs	r3, #8
 8000802:	e026      	b.n	8000852 <GPIO_Init+0x1e2>
 8000804:	2307      	movs	r3, #7
 8000806:	e024      	b.n	8000852 <GPIO_Init+0x1e2>
 8000808:	2306      	movs	r3, #6
 800080a:	e022      	b.n	8000852 <GPIO_Init+0x1e2>
 800080c:	2305      	movs	r3, #5
 800080e:	e020      	b.n	8000852 <GPIO_Init+0x1e2>
 8000810:	2304      	movs	r3, #4
 8000812:	e01e      	b.n	8000852 <GPIO_Init+0x1e2>
 8000814:	2303      	movs	r3, #3
 8000816:	e01c      	b.n	8000852 <GPIO_Init+0x1e2>
 8000818:	2302      	movs	r3, #2
 800081a:	e01a      	b.n	8000852 <GPIO_Init+0x1e2>
 800081c:	2301      	movs	r3, #1
 800081e:	e018      	b.n	8000852 <GPIO_Init+0x1e2>
 8000820:	40013c00 	.word	0x40013c00
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400
 800082c:	40020800 	.word	0x40020800
 8000830:	40020c00 	.word	0x40020c00
 8000834:	40021000 	.word	0x40021000
 8000838:	40021400 	.word	0x40021400
 800083c:	40021800 	.word	0x40021800
 8000840:	40021c00 	.word	0x40021c00
 8000844:	40022000 	.word	0x40022000
 8000848:	40022400 	.word	0x40022400
 800084c:	40022800 	.word	0x40022800
 8000850:	2300      	movs	r3, #0
 8000852:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000854:	4b5c      	ldr	r3, [pc, #368]	; (80009c8 <GPIO_Init+0x358>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000858:	4a5b      	ldr	r2, [pc, #364]	; (80009c8 <GPIO_Init+0x358>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode <<(temp2 * 4);
 8000860:	7c7a      	ldrb	r2, [r7, #17]
 8000862:	7cbb      	ldrb	r3, [r7, #18]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	fa02 f103 	lsl.w	r1, r2, r3
 800086a:	4a58      	ldr	r2, [pc, #352]	; (80009cc <GPIO_Init+0x35c>)
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	3302      	adds	r3, #2
 8000870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3.Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000874:	4b56      	ldr	r3, [pc, #344]	; (80009d0 <GPIO_Init+0x360>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	7912      	ldrb	r2, [r2, #4]
 800087c:	4611      	mov	r1, r2
 800087e:	2201      	movs	r2, #1
 8000880:	408a      	lsls	r2, r1
 8000882:	4611      	mov	r1, r2
 8000884:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <GPIO_Init+0x360>)
 8000886:	430b      	orrs	r3, r1
 8000888:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]

	//2. Configure the speed of the GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	799b      	ldrb	r3, [r3, #6]
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	4619      	mov	r1, r3
 80008ac:	2303      	movs	r3, #3
 80008ae:	408b      	lsls	r3, r1
 80008b0:	43db      	mvns	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	400a      	ands	r2, r1
 80008ba:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6899      	ldr	r1, [r3, #8]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	430a      	orrs	r2, r1
 80008ca:	609a      	str	r2, [r3, #8]
	temp = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	79db      	ldrb	r3, [r3, #7]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	4619      	mov	r1, r3
 80008ee:	2303      	movs	r3, #3
 80008f0:	408b      	lsls	r3, r1
 80008f2:	43db      	mvns	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	400a      	ands	r2, r1
 80008fc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68d9      	ldr	r1, [r3, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	430a      	orrs	r2, r1
 800090c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

	//4. Configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7a1b      	ldrb	r3, [r3, #8]
 8000916:	461a      	mov	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	4619      	mov	r1, r3
 800092e:	2301      	movs	r3, #1
 8000930:	408b      	lsls	r3, r1
 8000932:	43db      	mvns	r3, r3
 8000934:	4619      	mov	r1, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	400a      	ands	r2, r1
 800093c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6859      	ldr	r1, [r3, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	430a      	orrs	r2, r1
 800094c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]

	//5. Configure the alt function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	795b      	ldrb	r3, [r3, #5]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d131      	bne.n	80009be <GPIO_Init+0x34e>
	{
		//Configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	7c3a      	ldrb	r2, [r7, #16]
 8000972:	3208      	adds	r2, #8
 8000974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	7c3a      	ldrb	r2, [r7, #16]
 800098c:	4001      	ands	r1, r0
 800098e:	3208      	adds	r2, #8
 8000990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	7c3a      	ldrb	r2, [r7, #16]
 800099a:	3208      	adds	r2, #8
 800099c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7a5b      	ldrb	r3, [r3, #9]
 80009a4:	461a      	mov	r2, r3
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	7c3a      	ldrb	r2, [r7, #16]
 80009b6:	4301      	orrs	r1, r0
 80009b8:	3208      	adds	r2, #8
 80009ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40013c00 	.word	0x40013c00

080009d4 <RCC_GetPLLOutputClock>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

uint32_t RCC_GetPLLOutputClock()
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	// TODO: Write function to determine PLL output clock
	return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
	...

080009e4 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <RCC_GetPCLK1Value+0xa0>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 80009f8:	7a7b      	ldrb	r3, [r7, #9]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <RCC_GetPCLK1Value+0x20>
	{
		// HSI clock source
		SystemClk = 16000000;
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <RCC_GetPCLK1Value+0xa4>)
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e00b      	b.n	8000a1c <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8000a04:	7a7b      	ldrb	r3, [r7, #9]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d102      	bne.n	8000a10 <RCC_GetPCLK1Value+0x2c>
	{
		// HSE clock source
		SystemClk = 8000000;
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <RCC_GetPCLK1Value+0xa8>)
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	e005      	b.n	8000a1c <RCC_GetPCLK1Value+0x38>

	}
	else if (clksrc == 2)
 8000a10:	7a7b      	ldrb	r3, [r7, #9]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d102      	bne.n	8000a1c <RCC_GetPCLK1Value+0x38>
	{
		// PLL is not used in this course
		// TODO: Write function to determine PLL output clock
		SystemClk = RCC_GetPLLOutputClock();
 8000a16:	f7ff ffdd 	bl	80009d4 <RCC_GetPLLOutputClock>
 8000a1a:	60f8      	str	r0, [r7, #12]
	}

	// Determine AHB prescaler from register
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <RCC_GetPCLK1Value+0xa0>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	091b      	lsrs	r3, r3, #4
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 8000a2a:	7a3b      	ldrb	r3, [r7, #8]
 8000a2c:	2b07      	cmp	r3, #7
 8000a2e:	d802      	bhi.n	8000a36 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	72fb      	strb	r3, [r7, #11]
 8000a34:	e005      	b.n	8000a42 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp - 8];
 8000a36:	7a3b      	ldrb	r3, [r7, #8]
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <RCC_GetPCLK1Value+0xac>)
 8000a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a40:	72fb      	strb	r3, [r7, #11]
	}

	// Determine APB1 prescaler from register
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <RCC_GetPCLK1Value+0xa0>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	0a9b      	lsrs	r3, r3, #10
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 8000a50:	7a3b      	ldrb	r3, [r7, #8]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d802      	bhi.n	8000a5c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	72bb      	strb	r3, [r7, #10]
 8000a5a:	e005      	b.n	8000a68 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4];
 8000a5c:	7a3b      	ldrb	r3, [r7, #8]
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <RCC_GetPCLK1Value+0xb0>)
 8000a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a66:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000a68:	7afb      	ldrb	r3, [r7, #11]
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a70:	7abb      	ldrb	r3, [r7, #10]
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	00f42400 	.word	0x00f42400
 8000a8c:	007a1200 	.word	0x007a1200
 8000a90:	20000020 	.word	0x20000020
 8000a94:	20000030 	.word	0x20000030

08000a98 <I2C_GenerateStopCondition>:
{
	pI2Cx->CR2 |= (1 << I2C_CR2_START);
}

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    pI2Cx->CR2 |= (1 << I2C_CR2_STOP);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	605a      	str	r2, [r3, #4]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
	...

08000ab8 <I2C_PeriClockControl>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d12b      	bne.n	8000b22 <I2C_PeriClockControl+0x6a>
	{
		if(pI2Cx == I2C1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <I2C_PeriClockControl+0xcc>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d106      	bne.n	8000ae0 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a2c      	ldr	r2, [pc, #176]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
		}else if (pI2Cx == I2C4)
		{
			I2C4_PCLK_DI();
		}
	}
}
 8000ade:	e04b      	b.n	8000b78 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a2a      	ldr	r2, [pc, #168]	; (8000b8c <I2C_PeriClockControl+0xd4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d106      	bne.n	8000af6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a26      	ldr	r2, [pc, #152]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000aee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000af4:	e040      	b.n	8000b78 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C3)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <I2C_PeriClockControl+0xd8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d106      	bne.n	8000b0c <I2C_PeriClockControl+0x54>
			I2C3_PCLK_EN();
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b0a:	e035      	b.n	8000b78 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C4)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <I2C_PeriClockControl+0xdc>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d131      	bne.n	8000b78 <I2C_PeriClockControl+0xc0>
			I2C4_PCLK_EN();
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b20:	e02a      	b.n	8000b78 <I2C_PeriClockControl+0xc0>
		if(pI2Cx == I2C1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <I2C_PeriClockControl+0xcc>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d106      	bne.n	8000b38 <I2C_PeriClockControl+0x80>
			I2C1_PCLK_DI();
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b36:	e01f      	b.n	8000b78 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <I2C_PeriClockControl+0xd4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d106      	bne.n	8000b4e <I2C_PeriClockControl+0x96>
			I2C2_PCLK_DI();
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b46:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b4c:	e014      	b.n	8000b78 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C3)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <I2C_PeriClockControl+0xd8>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d106      	bne.n	8000b64 <I2C_PeriClockControl+0xac>
			I2C3_PCLK_DI();
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b62:	e009      	b.n	8000b78 <I2C_PeriClockControl+0xc0>
		}else if (pI2Cx == I2C4)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <I2C_PeriClockControl+0xdc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d105      	bne.n	8000b78 <I2C_PeriClockControl+0xc0>
			I2C4_PCLK_DI();
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <I2C_PeriClockControl+0xd0>)
 8000b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40005800 	.word	0x40005800
 8000b90:	40005c00 	.word	0x40005c00
 8000b94:	40006000 	.word	0x40006000

08000b98 <I2C_PeripheralControl>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d106      	bne.n	8000bb8 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f043 0201 	orr.w	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000bb6:	e005      	b.n	8000bc4 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f023 0201 	bic.w	r2, r3, #1
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	601a      	str	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
	...

08000bd0 <I2C_Init>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    // Enable the clock for the I2Cx peripheral
    I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff6a 	bl	8000ab8 <I2C_PeriClockControl>
    // Initialize as slave mode
    pI2CHandle->Mode = I2C_MODE_SLAVE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	779a      	strb	r2, [r3, #30]

    // Program the device own address (Using 7-bit slave address)
    uint32_t tempreg = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
    tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7a1b      	ldrb	r3, [r3, #8]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	609a      	str	r2, [r3, #8]
    // Own address 1 is a 7-bit address
    pI2CHandle->pI2Cx->OAR1 &= ~(1 << I2C_OAR1_OA1MODE);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c12:	609a      	str	r2, [r3, #8]
    // Own Address 1 enabled
    pI2CHandle->pI2Cx->OAR1 |= (1 << I2C_OAR1_OA1EN);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c22:	609a      	str	r2, [r3, #8]

    // fill I2C_TIMINGR register using hard-coded timings values
    uint8_t mode = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	72fb      	strb	r3, [r7, #11]
    mode = pI2CHandle->I2C_Config.I2C_SCLSpeed; // mode: SM10k, SM100k, FM or FMPLUS
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	72fb      	strb	r3, [r7, #11]
    if (RCC_GetPCLK1Value() == 8000000)
 8000c2e:	f7ff fed9 	bl	80009e4 <RCC_GetPCLK1Value>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <I2C_Init+0xd4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d107      	bne.n	8000c4a <I2C_Init+0x7a>
    {
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_8[mode];
 8000c3a:	7afa      	ldrb	r2, [r7, #11]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4919      	ldr	r1, [pc, #100]	; (8000ca8 <I2C_Init+0xd8>)
 8000c42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c46:	611a      	str	r2, [r3, #16]
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_48[mode];
    }else if (RCC_GetPCLK1Value() == 54000000)
    {
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_54[mode];
    }
}
 8000c48:	e028      	b.n	8000c9c <I2C_Init+0xcc>
    }else if (RCC_GetPCLK1Value() == 16000000)
 8000c4a:	f7ff fecb 	bl	80009e4 <RCC_GetPCLK1Value>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a16      	ldr	r2, [pc, #88]	; (8000cac <I2C_Init+0xdc>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d107      	bne.n	8000c66 <I2C_Init+0x96>
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_16[mode];
 8000c56:	7afa      	ldrb	r2, [r7, #11]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4914      	ldr	r1, [pc, #80]	; (8000cb0 <I2C_Init+0xe0>)
 8000c5e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c62:	611a      	str	r2, [r3, #16]
}
 8000c64:	e01a      	b.n	8000c9c <I2C_Init+0xcc>
    }else if (RCC_GetPCLK1Value() == 48000000)
 8000c66:	f7ff febd 	bl	80009e4 <RCC_GetPCLK1Value>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <I2C_Init+0xe4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d107      	bne.n	8000c82 <I2C_Init+0xb2>
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_48[mode];
 8000c72:	7afa      	ldrb	r2, [r7, #11]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	490f      	ldr	r1, [pc, #60]	; (8000cb8 <I2C_Init+0xe8>)
 8000c7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c7e:	611a      	str	r2, [r3, #16]
}
 8000c80:	e00c      	b.n	8000c9c <I2C_Init+0xcc>
    }else if (RCC_GetPCLK1Value() == 54000000)
 8000c82:	f7ff feaf 	bl	80009e4 <RCC_GetPCLK1Value>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <I2C_Init+0xec>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d106      	bne.n	8000c9c <I2C_Init+0xcc>
        pI2CHandle->pI2Cx->TIMINGR = i2c_timings_54[mode];
 8000c8e:	7afa      	ldrb	r2, [r7, #11]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	490a      	ldr	r1, [pc, #40]	; (8000cc0 <I2C_Init+0xf0>)
 8000c96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c9a:	611a      	str	r2, [r3, #16]
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	007a1200 	.word	0x007a1200
 8000ca8:	20000038 	.word	0x20000038
 8000cac:	00f42400 	.word	0x00f42400
 8000cb0:	20000048 	.word	0x20000048
 8000cb4:	02dc6c00 	.word	0x02dc6c00
 8000cb8:	20000058 	.word	0x20000058
 8000cbc:	0337f980 	.word	0x0337f980
 8000cc0:	20000068 	.word	0x20000068

08000cc4 <I2C_IRQInterruptConfig>:
 * @return				- none
 *
 * @Note 				- I2C IRQ configure priority function
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE)
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d147      	bne.n	8000d6a <I2C_IRQInterruptConfig+0xa6>
	{
		if (IRQNumber <= 31)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b1f      	cmp	r3, #31
 8000cde:	d80a      	bhi.n	8000cf6 <I2C_IRQInterruptConfig+0x32>
		{
			//Program register ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ce0:	4b48      	ldr	r3, [pc, #288]	; (8000e04 <I2C_IRQInterruptConfig+0x140>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	79fa      	ldrb	r2, [r7, #7]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <I2C_IRQInterruptConfig+0x140>)
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6013      	str	r3, [r2, #0]
		{
			//Program register ICER3 register
			*NVIC_ICER3 |= (1 << (IRQNumber % 128));
		}
	}
}
 8000cf4:	e081      	b.n	8000dfa <I2C_IRQInterruptConfig+0x136>
		else if(IRQNumber > 31 && IRQNumber < 64) //32 to 63
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b1f      	cmp	r3, #31
 8000cfa:	d90f      	bls.n	8000d1c <I2C_IRQInterruptConfig+0x58>
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b3f      	cmp	r3, #63	; 0x3f
 8000d00:	d80c      	bhi.n	8000d1c <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <I2C_IRQInterruptConfig+0x144>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	79fa      	ldrb	r2, [r7, #7]
 8000d08:	f002 021f 	and.w	r2, r2, #31
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	4611      	mov	r1, r2
 8000d14:	4a3c      	ldr	r2, [pc, #240]	; (8000e08 <I2C_IRQInterruptConfig+0x144>)
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e06e      	b.n	8000dfa <I2C_IRQInterruptConfig+0x136>
		else if(IRQNumber >= 64 && IRQNumber < 96) //64 to 95
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d20:	d90f      	bls.n	8000d42 <I2C_IRQInterruptConfig+0x7e>
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b5f      	cmp	r3, #95	; 0x5f
 8000d26:	d80c      	bhi.n	8000d42 <I2C_IRQInterruptConfig+0x7e>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000d28:	4b38      	ldr	r3, [pc, #224]	; (8000e0c <I2C_IRQInterruptConfig+0x148>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	79fa      	ldrb	r2, [r7, #7]
 8000d2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4a34      	ldr	r2, [pc, #208]	; (8000e0c <I2C_IRQInterruptConfig+0x148>)
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e05b      	b.n	8000dfa <I2C_IRQInterruptConfig+0x136>
		else if(IRQNumber >= 96 && IRQNumber < 128) //96 to 127
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b5f      	cmp	r3, #95	; 0x5f
 8000d46:	d958      	bls.n	8000dfa <I2C_IRQInterruptConfig+0x136>
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db54      	blt.n	8000dfa <I2C_IRQInterruptConfig+0x136>
			*NVIC_ISER3 |= (1 << (IRQNumber % 128));
 8000d50:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <I2C_IRQInterruptConfig+0x14c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	79fa      	ldrb	r2, [r7, #7]
 8000d56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	4611      	mov	r1, r2
 8000d62:	4a2b      	ldr	r2, [pc, #172]	; (8000e10 <I2C_IRQInterruptConfig+0x14c>)
 8000d64:	430b      	orrs	r3, r1
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	e047      	b.n	8000dfa <I2C_IRQInterruptConfig+0x136>
		if (IRQNumber <= 31)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b1f      	cmp	r3, #31
 8000d6e:	d80a      	bhi.n	8000d86 <I2C_IRQInterruptConfig+0xc2>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <I2C_IRQInterruptConfig+0x150>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4a25      	ldr	r2, [pc, #148]	; (8000e14 <I2C_IRQInterruptConfig+0x150>)
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	e039      	b.n	8000dfa <I2C_IRQInterruptConfig+0x136>
		else if(IRQNumber > 31 && IRQNumber < 64) //32 to 63
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b1f      	cmp	r3, #31
 8000d8a:	d90f      	bls.n	8000dac <I2C_IRQInterruptConfig+0xe8>
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d90:	d80c      	bhi.n	8000dac <I2C_IRQInterruptConfig+0xe8>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <I2C_IRQInterruptConfig+0x154>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	79fa      	ldrb	r2, [r7, #7]
 8000d98:	f002 021f 	and.w	r2, r2, #31
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	4611      	mov	r1, r2
 8000da4:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <I2C_IRQInterruptConfig+0x154>)
 8000da6:	430b      	orrs	r3, r1
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e026      	b.n	8000dfa <I2C_IRQInterruptConfig+0x136>
		else if(IRQNumber >= 64 && IRQNumber < 96) //64 to 95
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b3f      	cmp	r3, #63	; 0x3f
 8000db0:	d90f      	bls.n	8000dd2 <I2C_IRQInterruptConfig+0x10e>
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b5f      	cmp	r3, #95	; 0x5f
 8000db6:	d80c      	bhi.n	8000dd2 <I2C_IRQInterruptConfig+0x10e>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <I2C_IRQInterruptConfig+0x158>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <I2C_IRQInterruptConfig+0x158>)
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e013      	b.n	8000dfa <I2C_IRQInterruptConfig+0x136>
		else if(IRQNumber >= 96 && IRQNumber < 128) //96 to 127
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b5f      	cmp	r3, #95	; 0x5f
 8000dd6:	d910      	bls.n	8000dfa <I2C_IRQInterruptConfig+0x136>
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0c      	blt.n	8000dfa <I2C_IRQInterruptConfig+0x136>
			*NVIC_ICER3 |= (1 << (IRQNumber % 128));
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <I2C_IRQInterruptConfig+0x15c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	79fa      	ldrb	r2, [r7, #7]
 8000de6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	4611      	mov	r1, r2
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <I2C_IRQInterruptConfig+0x15c>)
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	e7ff      	b.n	8000dfa <I2C_IRQInterruptConfig+0x136>
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000e104 	.word	0xe000e104
 8000e0c:	e000e108 	.word	0xe000e108
 8000e10:	e000e10c 	.word	0xe000e10c
 8000e14:	e000e180 	.word	0xe000e180
 8000e18:	e000e184 	.word	0xe000e184
 8000e1c:	e000e188 	.word	0xe000e188
 8000e20:	e000e18c 	.word	0xe000e18c

08000e24 <I2C_CloseSendData>:

	return busystate;
}

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    //disable TXIE, STOPIE, TCIE Control Bits
    pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_TXIE);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0202 	bic.w	r2, r2, #2
 8000e3a:	601a      	str	r2, [r3, #0]
    pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_STOPIE);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0220 	bic.w	r2, r2, #32
 8000e4a:	601a      	str	r2, [r3, #0]
    pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_TCIE);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e5a:	601a      	str	r2, [r3, #0]

	pI2CHandle->TxRxState = I2C_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	771a      	strb	r2, [r3, #28]
    pI2CHandle->pTxBuffer = NULL;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
    pI2CHandle->TxLen = 0;}
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <I2C_CloseReceiveData>:


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    //disable RXIE, STOPIE, TCIE, NACKIE Control Bits
    pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_RXIE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0204 	bic.w	r2, r2, #4
 8000e8e:	601a      	str	r2, [r3, #0]
    pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_STOPIE);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0220 	bic.w	r2, r2, #32
 8000e9e:	601a      	str	r2, [r3, #0]
    pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_TCIE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eae:	601a      	str	r2, [r3, #0]

	pI2CHandle->TxRxState = I2C_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <I2C_EV_IRQHandling>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
    uint32_t temp1, temp2;
    // Handle for interrupt generated by ADDR event
    temp1 = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_ADDRIE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	60fb      	str	r3, [r7, #12]
    temp2 = pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_ADDR);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	60bb      	str	r3, [r7, #8]
    if (temp1 && temp2)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d012      	beq.n	8000f1e <I2C_EV_IRQHandling+0x4c>
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00f      	beq.n	8000f1e <I2C_EV_IRQHandling+0x4c>
    {
        // clear flag by setting the ADDRCF bit:
        pI2CHandle->pI2Cx->ICR |= (1 << I2C_ICR_ADDRCF);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	69da      	ldr	r2, [r3, #28]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0208 	orr.w	r2, r2, #8
 8000f0c:	61da      	str	r2, [r3, #28]
        /* Enable Address Acknowledge */
        pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_NACK);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f1c:	605a      	str	r2, [r3, #4]
    }

    // Handle for interrupt generated by received NACK event
    temp1 = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_NACKIE);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	60fb      	str	r3, [r7, #12]
    temp2 = pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_NACKF);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	60bb      	str	r3, [r7, #8]
    if (temp1 && temp2)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00e      	beq.n	8000f5a <I2C_EV_IRQHandling+0x88>
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00b      	beq.n	8000f5a <I2C_EV_IRQHandling+0x88>
    {
        // clear flag by setting the NACKCF bit:
        pI2CHandle->pI2Cx->ICR |= (1 << I2C_ICR_NACKCF);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	69da      	ldr	r2, [r3, #28]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f042 0210 	orr.w	r2, r2, #16
 8000f50:	61da      	str	r2, [r3, #28]

        I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_NACK);
 8000f52:	2103      	movs	r1, #3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff f9f9 	bl	800034c <I2C_ApplicationEventCallback>
    }

    // Handle for interrupt generated by TC event
    temp1 = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TCIE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f64:	60fb      	str	r3, [r7, #12]
    temp2 = pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_TC);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f70:	60bb      	str	r3, [r7, #8]
    if (temp1 && temp2)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <I2C_EV_IRQHandling+0xce>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d010      	beq.n	8000fa0 <I2C_EV_IRQHandling+0xce>
    {
            //1. generate the STOP condition
            if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d104      	bne.n	8000f92 <I2C_EV_IRQHandling+0xc0>
            {
                I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fd83 	bl	8000a98 <I2C_GenerateStopCondition>
            }

            // 2. reset all the member elements of the handle structure.
            I2C_CloseSendData(pI2CHandle);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff46 	bl	8000e24 <I2C_CloseSendData>

            pI2CHandle->pI2Cx->CR2 = 0x0; // clear CR2 register
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]

    }

    // Handle for interrupt generated by STOPF event
    temp1 = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_STOPIE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0320 	and.w	r3, r3, #32
 8000faa:	60fb      	str	r3, [r7, #12]
    temp2 = pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_STOPF);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	60bb      	str	r3, [r7, #8]
    if (temp1 && temp2)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00a      	beq.n	8000fd4 <I2C_EV_IRQHandling+0x102>
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d007      	beq.n	8000fd4 <I2C_EV_IRQHandling+0x102>
    {
        // STOPF flag is set
        // - set by hardware when a Stop condition is detected.
        // - cleared by software by setting the STOPCF bit:
        pI2CHandle->pI2Cx->ICR |= (1 << I2C_ICR_STOPCF);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	69da      	ldr	r2, [r3, #28]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0220 	orr.w	r2, r2, #32
 8000fd2:	61da      	str	r2, [r3, #28]
        //Notify the application that STOP is detected
        //I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
    }

    // Handle for interrupt generated by TXIS event
    temp1 = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TXIE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
    temp2 = pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_TXIS);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
    if (temp1 && temp2)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d02a      	beq.n	8001048 <I2C_EV_IRQHandling+0x176>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d027      	beq.n	8001048 <I2C_EV_IRQHandling+0x176>
    {
        // TXIS flag is set

        //check for device mode
        if (pI2CHandle->Mode == I2C_MODE_MASTER)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7f9b      	ldrb	r3, [r3, #30]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d118      	bne.n	8001032 <I2C_EV_IRQHandling+0x160>
        {
            // master: We have to do the data transmission
            if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7f1b      	ldrb	r3, [r3, #28]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d11f      	bne.n	8001048 <I2C_EV_IRQHandling+0x176>
            {
                if (pI2CHandle->TxLen > 0)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d01b      	beq.n	8001048 <I2C_EV_IRQHandling+0x176>
                {
                    // 1. load the data in TXDR
                    pI2CHandle->pI2Cx->TXDR = *(pI2CHandle->pTxBuffer);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
                    // 2. decrement TxLen
                    pI2CHandle->TxLen--;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	615a      	str	r2, [r3, #20]
                    // 3. increment buffer address
                    pI2CHandle->pTxBuffer++;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	e00a      	b.n	8001048 <I2C_EV_IRQHandling+0x176>
        }
        else
        {
            //slave
            // check that slave is in transmitter mode (DIR bit set in ISR register)
            if (pI2CHandle->pI2Cx->ISR & (1<<I2C_ISR_DIR))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <I2C_EV_IRQHandling+0x176>
            {
                I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8001040:	2104      	movs	r1, #4
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff f982 	bl	800034c <I2C_ApplicationEventCallback>
            }
        }
    }
    // Handle for interrupt generated by RXNE event
    temp1 = pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_RXIE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	60fb      	str	r3, [r7, #12]
    temp2 = pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_RXNE);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60bb      	str	r3, [r7, #8]
    if (temp1 && temp2)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d044      	beq.n	80010f0 <I2C_EV_IRQHandling+0x21e>
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d041      	beq.n	80010f0 <I2C_EV_IRQHandling+0x21e>
    {
        // RXNE flag is set
        //check for device mode
        if (pI2CHandle->Mode == I2C_MODE_MASTER)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7f9b      	ldrb	r3, [r3, #30]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d132      	bne.n	80010da <I2C_EV_IRQHandling+0x208>
        {
            // master mode
            if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7f1b      	ldrb	r3, [r3, #28]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d139      	bne.n	80010f0 <I2C_EV_IRQHandling+0x21e>
            {
                if (pI2CHandle->RxLen > 0)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d010      	beq.n	80010a6 <I2C_EV_IRQHandling+0x1d4>
                {
                    // 1. read RXDR data into buffer
                    *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->RXDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
                    // 2. decrement RxLen
                    pI2CHandle->RxLen--;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	1e5a      	subs	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
                    // 3. increment buffer address
                    pI2CHandle->pRxBuffer++;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	611a      	str	r2, [r3, #16]
                }

                if(pI2CHandle->RxLen == 0)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d120      	bne.n	80010f0 <I2C_EV_IRQHandling+0x21e>
                {
                    //1. generate the stop condition
                    if(pI2CHandle->Sr == I2C_DISABLE_SR){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d104      	bne.n	80010c2 <I2C_EV_IRQHandling+0x1f0>
                        I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fceb 	bl	8000a98 <I2C_GenerateStopCondition>
                    }

                    //2 . Close the I2C rx
                    I2C_CloseReceiveData(pI2CHandle);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fed8 	bl	8000e78 <I2C_CloseReceiveData>

                    //3. Notify the application
                    I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 80010c8:	2101      	movs	r1, #1
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff f93e 	bl	800034c <I2C_ApplicationEventCallback>

                    pI2CHandle->pI2Cx->CR2 = 0x0; // clear CR2 register
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
            {
                I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
            }
        }
    }
}
 80010d8:	e00a      	b.n	80010f0 <I2C_EV_IRQHandling+0x21e>
            if (!(pI2CHandle->pI2Cx->ISR & (1<<I2C_ISR_DIR)))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <I2C_EV_IRQHandling+0x21e>
                I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 80010e8:	2105      	movs	r1, #5
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff f92e 	bl	800034c <I2C_ApplicationEventCallback>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <I2C_ER_IRQHandling>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    uint32_t temp1,temp2;

    //Know the status of ERRIE control bit in CR1
    temp2 = (pI2CHandle->pI2Cx->CR1) & ( 1 << I2C_CR1_ERRIE);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110a:	60fb      	str	r3, [r7, #12]


    /***********************Check for Bus error************************************/
    temp1 = (pI2CHandle->pI2Cx->ISR) & ( 1<< I2C_ISR_BERR);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	60bb      	str	r3, [r7, #8]
    if(temp1  && temp2 )
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00e      	beq.n	800113c <I2C_ER_IRQHandling+0x44>
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <I2C_ER_IRQHandling+0x44>
    {
        //This is Bus error

        //clear the bus error flag
        pI2CHandle->pI2Cx->ICR |= ( 1 << I2C_ICR_BERRCF);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	69da      	ldr	r2, [r3, #28]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001132:	61da      	str	r2, [r3, #28]

        //notify the application about the error
        I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8001134:	2100      	movs	r1, #0
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f908 	bl	800034c <I2C_ApplicationEventCallback>
    }

    /***********************Check for arbitration lost error************************************/
    temp1 = (pI2CHandle->pI2Cx->ISR) & ( 1<< I2C_ISR_ARLO);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001146:	60bb      	str	r3, [r7, #8]
    if(temp1  && temp2)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00e      	beq.n	800116c <I2C_ER_IRQHandling+0x74>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00b      	beq.n	800116c <I2C_ER_IRQHandling+0x74>
    {
        //This is arbitration lost error

        //clear the arbitration lost error flag
        pI2CHandle->pI2Cx->ICR |= ( 1 << I2C_ICR_ARLOCF);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001162:	61da      	str	r2, [r3, #28]

        //notify the application about the error
        I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8001164:	2101      	movs	r1, #1
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff f8f0 	bl	800034c <I2C_ApplicationEventCallback>
    }

    /***********************Check for Overrun/underrun error************************************/
    temp1 = (pI2CHandle->pI2Cx->ISR) & ( 1<< I2C_ISR_OVR);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	60bb      	str	r3, [r7, #8]
    if(temp1  && temp2)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00e      	beq.n	800119c <I2C_ER_IRQHandling+0xa4>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <I2C_ER_IRQHandling+0xa4>
    {
        //This is Overrun/underrun error

        //clear the Overrun/underrun error flag
        pI2CHandle->pI2Cx->ICR |= ( 1 << I2C_ICR_OVRCF);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	69da      	ldr	r2, [r3, #28]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001192:	61da      	str	r2, [r3, #28]

        //notify the application about the error
        I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8001194:	2102      	movs	r1, #2
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f8d8 	bl	800034c <I2C_ApplicationEventCallback>
    }

    /***********************Check for Time out error************************************/
    temp1 = (pI2CHandle->pI2Cx->ISR) & ( 1<< I2C_ISR_TIMEOUT);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a6:	60bb      	str	r3, [r7, #8]
    if(temp1  && temp2)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00e      	beq.n	80011cc <I2C_ER_IRQHandling+0xd4>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00b      	beq.n	80011cc <I2C_ER_IRQHandling+0xd4>
    {
        //This is Time out error

        //clear the Time out error flag
        pI2CHandle->pI2Cx->ICR |= ( 1 << I2C_ICR_TIMEOUTCF);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011c2:	61da      	str	r2, [r3, #28]

        //notify the application about the error
        I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 80011c4:	2103      	movs	r1, #3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff f8c0 	bl	800034c <I2C_ApplicationEventCallback>
    }
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <I2C_SlaveEnableDisableCallbackEvents>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE)
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d11e      	bne.n	8001224 <I2C_SlaveEnableDisableCallbackEvents+0x50>
    {
        //enable TXIE, RXIE, STOPIE, ADDRIE, NACKIE Control Bits
		pI2Cx->CR1 |= ( 1 << I2C_CR1_TXIE);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f043 0202 	orr.w	r2, r3, #2
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
        pI2Cx->CR1 |= ( 1 << I2C_CR1_RXIE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f043 0204 	orr.w	r2, r3, #4
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
        pI2Cx->CR1 |= ( 1 << I2C_CR1_STOPIE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f043 0220 	orr.w	r2, r3, #32
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
        pI2Cx->CR1 |= ( 1 << I2C_CR1_ADDRIE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f043 0208 	orr.w	r2, r3, #8
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
        pI2Cx->CR1 |= ( 1 << I2C_CR1_NACKIE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f043 0210 	orr.w	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_RXIE);
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_STOPIE);
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_ADDRIE);
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_NACKIE);
    }
}
 8001222:	e01d      	b.n	8001260 <I2C_SlaveEnableDisableCallbackEvents+0x8c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_TXIE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 0202 	bic.w	r2, r3, #2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	601a      	str	r2, [r3, #0]
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_RXIE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 0204 	bic.w	r2, r3, #4
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	601a      	str	r2, [r3, #0]
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_STOPIE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 0220 	bic.w	r2, r3, #32
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	601a      	str	r2, [r3, #0]
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_ADDRIE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 0208 	bic.w	r2, r3, #8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]
        pI2Cx->CR1 &= ~( 1 << I2C_CR1_NACKIE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 0210 	bic.w	r2, r3, #16
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <I2C_SlaveSendData>:
 * @return				- none
 *
 * @Note 				- none
 */
void I2C_SlaveSendData(I2C_RegDef_t *pI2Cx, uint8_t data)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
    pI2Cx->TXDR = data;
 8001276:	78fa      	ldrb	r2, [r7, #3]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <I2C_SlaveReceiveData>:
 * @return				- none
 *
 * @Note 				- none
 */
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
    return (uint8_t)pI2Cx->RXDR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	b2db      	uxtb	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
	...

080012a0 <__libc_init_array>:
 80012a0:	b570      	push	{r4, r5, r6, lr}
 80012a2:	4d0d      	ldr	r5, [pc, #52]	; (80012d8 <__libc_init_array+0x38>)
 80012a4:	4c0d      	ldr	r4, [pc, #52]	; (80012dc <__libc_init_array+0x3c>)
 80012a6:	1b64      	subs	r4, r4, r5
 80012a8:	10a4      	asrs	r4, r4, #2
 80012aa:	2600      	movs	r6, #0
 80012ac:	42a6      	cmp	r6, r4
 80012ae:	d109      	bne.n	80012c4 <__libc_init_array+0x24>
 80012b0:	4d0b      	ldr	r5, [pc, #44]	; (80012e0 <__libc_init_array+0x40>)
 80012b2:	4c0c      	ldr	r4, [pc, #48]	; (80012e4 <__libc_init_array+0x44>)
 80012b4:	f000 f818 	bl	80012e8 <_init>
 80012b8:	1b64      	subs	r4, r4, r5
 80012ba:	10a4      	asrs	r4, r4, #2
 80012bc:	2600      	movs	r6, #0
 80012be:	42a6      	cmp	r6, r4
 80012c0:	d105      	bne.n	80012ce <__libc_init_array+0x2e>
 80012c2:	bd70      	pop	{r4, r5, r6, pc}
 80012c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80012c8:	4798      	blx	r3
 80012ca:	3601      	adds	r6, #1
 80012cc:	e7ee      	b.n	80012ac <__libc_init_array+0xc>
 80012ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80012d2:	4798      	blx	r3
 80012d4:	3601      	adds	r6, #1
 80012d6:	e7f2      	b.n	80012be <__libc_init_array+0x1e>
 80012d8:	08001300 	.word	0x08001300
 80012dc:	08001300 	.word	0x08001300
 80012e0:	08001300 	.word	0x08001300
 80012e4:	08001304 	.word	0x08001304

080012e8 <_init>:
 80012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ea:	bf00      	nop
 80012ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ee:	bc08      	pop	{r3}
 80012f0:	469e      	mov	lr, r3
 80012f2:	4770      	bx	lr

080012f4 <_fini>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	bf00      	nop
 80012f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012fa:	bc08      	pop	{r3}
 80012fc:	469e      	mov	lr, r3
 80012fe:	4770      	bx	lr
